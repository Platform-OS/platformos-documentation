---
converter: markdown
---

{% include 'reference/liquid_filters_overview' %}

{% raw %}

<h2 class="font-weight-bold">add_to_array</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - array to which we add the item given as the second parameter



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array to which we add a new element </li>

  <li>item (<tt>Object</tt>) - item we add to the array </li>



<h4>Examples:</h4>

```liquid
{% assign array = 'a,b,c' | split: ',' %}
{{ array | add_to_array: 'd' }} => ['a', 'b', 'c', 'd']
```

</div>
<h2 class="font-weight-bold">add_to_date</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Date</tt>) - input date/time to which the number_of_days days have been added; use negative values to obtain
a date in the past



<h4>Params:</h4>

  <li>date (<tt>Date</tt>, <tt>String</tt>, <tt>Time</tt>) - date to which we add number_of_days </li>

  <li>number_of_days (<tt>Integer</tt>) - number of days to add to the input date </li>



<h4>Examples:</h4>

```liquid
{{ '2010-01-01' | add_to_date: 1 }} => 2010-01-02
```

</div>
<h2 class="font-weight-bold">advanced_format</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - formatted string



<h4>Params:</h4>

  <li>argument_to_format (<tt>Object</tt>) - object you want to format </li>

  <li>format (<tt>String</tt>) - should look like: %[flags][width][.precision]type. More examples and information could be taken from: https://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sprintf </li>



<h4>Examples:</h4>

```liquid
{{ 3.124 | advanced_format: '%.2f' }} => 3.12
{{ 3 | advanced_format: '%.2f' }} => 3.00
In the example above flags is not present, width is not present (refers to the total final
length of the string), precision ".2" means 2 digits after the decimal point,
type "f" means floating point
```

</div>
<h2 class="font-weight-bold">any</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Boolean</tt>) - checks if given array contains at least one queried string/number



<h4>Params:</h4>

  <li>array (<tt>Array</tt>) - array to search through  <em>(defaults to: <tt>[]</tt>)</em> </li>

  <li>query (<tt>String</tt>, <tt>Number</tt>) - String/Number compared to each item in the given array  <em>(defaults to: <tt>&#39;true&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{% assign elements = 'foo,bar' | split: ',' %}
{{ elements | any: 'foo' }} => true
```

</div>
<h2 class="font-weight-bold">asset_url</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - url to the physical file if existing, root asset url otherwise



<h4>Params:</h4>

  <li>file_path (<tt>String</tt>) -  </li>



<h4>Examples:</h4>

```liquid
{{ "valid/file.jpg" | asset_url }} => https://cdn-server.com/valid/file.jpg
```

</div>
<h2 class="font-weight-bold">assign_to_hash_key</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Hash</tt>) -



<h4>Params:</h4>

  <li>hash (<tt>Hash</tt>) -  </li>

  <li>key (<tt>String</tt>) -  </li>

  <li>value (<tt>Object</tt>) -  </li>



<h4>Examples:</h4>

```liquid
{% assign accountants = "Angela,Kevin,Oscar" | split: "," %}
{% assign management = "David,Jan,Michael" | split: "," %}
{% assign company = '{}' | parse_json %}
{% assign company = company | assign_to_hash_key: "name", "Dunder Mifflin" %}
{% assign company = company | assign_to_hash_key: "accountants", accountants %}
{% assign company = company | assign_to_hash_key: "management", management %}
{{ company }} => {"name"=>"Dunder Mifflin", "accountants"=>["Angela", "Kevin", "Oscar"], "management"=>["David", "Jan", "Michael"]}
```

</div>
<h2 class="font-weight-bold">compact</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - array from which blank values are removed



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array with some blank values </li>



<h4>Examples:</h4>

```liquid
{{ array }} => [1,2,null,4]
{{ array | compact }} => [1,2,4]
```

</div>
<h2 class="font-weight-bold">compute_hmac</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - Keyed-hash message authentication code (HMAC), that can
be used to authenticate requests from third
party apps, for ex. Stripe webhooks requests



<h4>Params:</h4>

  <li>data (<tt>String</tt>) - message to be authenticated </li>

  <li>secret (<tt>String</tt>) - secret key </li>

  <li>algorithm (<tt>String</tt>) - defaults to SHA256. Supported algorithms are:
SHA, SHA1, SHA224, SHA256, SHA384, SHA512, MD4, MDC2, MD5, RIPEMD160, DSS1  <em>(defaults to: <tt>&#39;sha256&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 'some_data' | compute_hmac: 'some_secret', 'MD4' }} => 'cabff538af5f97ccc27d481942616492'
```

</div>
<h2 class="font-weight-bold">detect</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Object</tt>) - with first object from collection that matches provided conditions



<h4>Params:</h4>

  <li>objects (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>

  <li>conditions (<tt>Hash</tt>) - hash with conditions { field_name: value }  <em>(defaults to: <tt>{}</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ objects }} => [{"foo":1,"bar":"a"},{"foo":2,"bar":"b"},{"foo":3,"bar":"c"}]
{{ objects | detect: foo: 2 }} => [{"foo":2,"bar":"b"}]
```

</div>
<h2 class="font-weight-bold">escape_javascript</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) -



<h4>Params:</h4>

  <li>text (<tt>String</tt>) - text to be escaped </li>



</div>
<h2 class="font-weight-bold">expand_url_template</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - url



<h4>Params:</h4>

  <li>template (<tt>String</tt>) - - url template </li>

  <li>params (<tt>Hash</tt>) - - url data </li>



<h4>Examples:</h4>

```liquid
{{ "/search/{city}/{street}" | expand_url_template city: "Sydney", street: "BlueRoad" }}
=> /search/Sydney/BlueRoad
```

</div>
<h2 class="font-weight-bold">extract_url_params</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Hash</tt>) - params



<h4>Params:</h4>

  <li>url (<tt>String</tt>) -  </li>

  <li>templates (<tt>String</tt>, <tt>Array&lt;String&gt;</tt>) - url templates array </li>



<h4>Examples:</h4>

```liquid
{{ "/search/Sydney/BlueRoad" | extract_url_params: "/search/{city}/{street}" }}
=> {"city"=>"Sydney", "street"=>"BlueRoad"}
```

</div>
<h2 class="font-weight-bold">fetch</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Object</tt>) -



<h4>Params:</h4>

  <li>hash (<tt>Hash</tt>) -  </li>

  <li>key (<tt>String</tt>) -  </li>



<h4>Examples:</h4>

```liquid
{{ users | first | fetch: "name"}} => "Jane"
```

</div>
<h2 class="font-weight-bold">flatten</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - with objects



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Array&gt;</tt>) - array of arrays to be processed </li>



<h4>Examples:</h4>

```liquid
{{ array_of_arrays }} => [[1,2], [3,4], [5,6]]
{{ array_of_arrays | flatten }} => [1,2,3,4,5,6]
```

</div>
<h2 class="font-weight-bold">group_by</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Hash&lt;MethodResult =&gt; Array&lt;Object&gt;&gt;</tt>) - the original array grouped by method
specified by the second parameter



<h4>Params:</h4>

  <li>objects (<tt>Array&lt;Object&gt;</tt>) - array to be grouped </li>

  <li>method_name (<tt>String</tt>) - method name to be used to group Objects </li>



<h4>Examples:</h4>

```liquid
{% parse_json objects %}
  [
    { "size": "xl", "color": "red"},
    { "size": "xl", "color": "yellow"},
    { "size": "s", "color": "red"}
  ]
{% endparse_json %}

{{ objects | group_by: 'size' }} => {"xl"=>[{"size"=>"xl", "color"=>"red"}, {"size"=>"xl", "color"=>"yellow"}], "s"=>[{"size"=>"s", "color"=>"red"}]}
```

</div>
<h2 class="font-weight-bold">html_safe</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - returns string that can be rendered with all html tags
by default all variables are striped from danger html tags



<h4>Params:</h4>

  <li>text (<tt>String</tt>) -  </li>



</div>
<h2 class="font-weight-bold">humanize</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - a human readable string derived from the input; capitalizes the first word, turns
underscores into spaces, and strips a trailing '_id' if present. Meant for creating pretty output.



<h4>Params:</h4>

  <li>key (<tt>String</tt>) - input string to be transformed </li>



<h4>Examples:</h4>

```liquid
{{ 'car_model' | humanize }} => 'Car model'
```

</div>
<h2 class="font-weight-bold">in_groups_of</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Array&lt;Object&gt;&gt;</tt>) - the original array split into groups having the size
specified by the second parameter (an array of arrays)



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array to be split into groups </li>

  <li>integer (<tt>Integer</tt>) - the size of each group the array is to be split into </li>



<h4>Examples:</h4>

```liquid
{% assign elements = '1,2,3,4' | split: ',' %}
{{ elements | in_groups_of: 3 }} => [[1, 2, 3], [4, null, null]]
```

</div>
<h2 class="font-weight-bold">intersection</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - that exists in both arrays



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>

  <li>other_array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>



<h4>Examples:</h4>

```liquid
{% assign array = '1,2,3,4' | split: ',' %}
{% assign other_array = '3,4,5,6' | split: ',' %}

{{ array | intersection: other_array }} => [3,4]
```

</div>
<h2 class="font-weight-bold">is_date_before</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Boolean</tt>) - returns true if first date is lower than second date



<h4>Params:</h4>

  <li>first_date (<tt>DateTime</tt>, <tt>String</tt>) - time which will be compared to the second one </li>

  <li>second_date (<tt>DateTime</tt>, <tt>String</tt>) - second time, against which we will do comparison </li>



<h4>Examples:</h4>

```liquid
{{ '2010-01-02' | date_before: '2010-01-03' }} => true
{{ '6 months ago' | date_before: '2010-01-03' }} => false
{{ '1 day ago' | date_before: 'now' }} => true
```

</div>
<h2 class="font-weight-bold">is_date_in_past</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Boolean</tt>) - true if date passed is in the past, false otherwise



<h4>Params:</h4>

  <li>date (<tt>Date</tt>, <tt>String</tt>, <tt>Time</tt>) - date object, can be also a string </li>



<h4>Examples:</h4>

```liquid
{{ '2010-01-01' | is_date_in_past }} => true
```

</div>
<h2 class="font-weight-bold">is_included_in_array</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Boolean</tt>) - whether the array includes the element given



<h4>Params:</h4>

  <li>array (<tt>Array</tt>) - array of elements where we look into </li>

  <li>el (<tt>Object</tt>) - we will look for this element inside the array </li>



<h4>Examples:</h4>

```liquid
{% assign elements = 'a,b,c,d' | split: ',' %}
{{ elements | is_included_in_array: 'c' }} => true
```

</div>
<h2 class="font-weight-bold">is_token_valid</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Boolean</tt>) - returns true if the token has not expired and was generated for given user



<h4>Params:</h4>

  <li>token (<tt>String</tt>) - encrypted token generated via temporary_token graphql property </li>

  <li>user_id (<tt>Integer</tt>) - id of the user who generated token </li>



</div>
<h2 class="font-weight-bold">json</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - JSON formatted string containing a representation of object



<h4>Params:</h4>

  <li>object (<tt>Object</tt>) - object we want a JSON representation of </li>



<h4>Examples:</h4>

```liquid
{{ user | json }} => {"name":"Mike","email":"mike@mail.com"}
```

</div>
<h2 class="font-weight-bold">jwt_decode</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Hash</tt>) - result of decoded jwt token



<h4>Params:</h4>

  <li>encoded_token (<tt>String</tt>) - encoded jwt token you want to decode </li>

  <li>algorithm (<tt>String</tt>) - algorithm which was used to encode the token </li>

  <li>secret (<tt>String</tt>) - either a shared secret (for hmac) or a PUBLIC key for RSA
Valid options:
  none - unsigned token
  HS256 - HMAC using SHA-256 hash algorithm
  HS384 - HMAC using SHA-384 hash algorithm
  HS512 - HMAC using SHA-512 hash algorithm
  RS256 - RSA using SHA-256 hash algorithm
  RS384 - RSA using SHA-384 hash algorithm
  RS512 - RSA using SHA-512 hash algorithm  <em>(defaults to: <tt>nil</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
HMAC:
  {% assign original_payload = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJrZXkiOiJ2YWx1ZSIsImFub3RoZXJfa2V5IjoiYW5vdGhlciB2YWx1ZSJ9.XT8sHXyPTA9DoHzssXh1q6Uv2D1ENosW0F3Ixle85L0' | jwt_decode: 'HS256', 'this-is-secret'  }} =>
  [
    {
      "key" => "value",
      "another_key" => "another value"
    },
    {
      "typ" => "JWT",
      "alg" => "HS256"
    }
  ]
```

```liquid
RSA:
  {% capture public_key %}
  -----BEGIN PUBLIC KEY-----
  MIIBI...
  -----END PUBLIC KEY-----
  {% endcapture %}
  {% assign original_payload = 'some encoded token' | jwt_decode: 'RS256', public_key %}
```

</div>
<h2 class="font-weight-bold">jwt_encode</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - jwt token encrypted using algorithm of your choice



<h4>Params:</h4>

  <li>payload (<tt>Hash</tt>) - payload or message you want to encrypt </li>

  <li>algorithm (<tt>String</tt>) - algorithm you want to use for encryption. </li>

  <li>secret (<tt>String</tt>) - either a shared secret (for hmac) or private key for RSA  <em>(defaults to: <tt>nil</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{% capture payload_string %}
  {
    "key": "value",
    "another_key": "another value"
  }
{% endcapture %}
{% assign payload = payload_string | parse_json %}
```

```liquid
HMAC:
  {{ payload | jwt_encode: 'HS256', 'this-is-secret'  }} => 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJrZXkiOiJ2YWx1ZSIsImFub3RoZXJfa2V5IjoiYW5vdGhlciB2YWx1ZSJ9.XT8sHXyPTA9DoHzssXh1q6Uv2D1ENosW0F3Ixle85L0'
```

```liquid
RSA:
  {% capture private_key %}
  -----BEGIN RSA PRIVATE KEY-----
  MIIEpA...
  -----END RSA PRIVATE KEY-----
  {% endcapture %}
  {% assign jwt_token = payload | jwt_encode: 'RS256', private_key  %}
  {% comment %} Please note that storing private key as a plain text in a code is not a good idea. We suggest you
                provide the key via Partner Portal and use context.constants.<name of private key constant> instead.{% endcomment %}
```

</div>
<h2 class="font-weight-bold">limit</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - parameter; [1,2,3,4] limited to 2 elements gives [1,2]



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array to be shrank </li>

  <li>limit (<tt>Integer</tt>) - number of elements to be returned </li>



<h4>Examples:</h4>

```liquid
items => [{id: 1, name: 'foo', label: 'Foo'}, {id: 2, name: 'bar', label: 'Bar'}]
{{ items | limit: 1 }} => [{ id: 1, name: 'foo', label: 'Foo' }]
```

</div>
<h2 class="font-weight-bold">localize</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>, <tt>nil</tt>) - formatted representation of the passed in DateTime object



<h4>Params:</h4>

  <li>datetime (<tt>String</tt>, <tt>DateTime</tt>) - DateTime object to be formatted; can be a string and it will be converted
to a date </li>

  <li>format (<tt>String</tt>) - the format to be used for formatting the date; default is 'long'; other values can be used:
they are taken from translations, keys are of the form 'time.formats.#!{format_name}'  <em>(defaults to: <tt>&#39;long&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ '2010-01-01' | localize }} => 'January 01, 2010'
```

</div>
<h2 class="font-weight-bold">map</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - array of objects obtained from the original array of objects
(passed in as the object parameter) by calling the method 'method' on each object
in the original array



<h4>Params:</h4>

  <li>object (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>

  <li>method (<tt>String</tt>) - method name to be called on each of the objects in the passed
in array of objects </li>



<h4>Examples:</h4>

```liquid
{% assign objects = '[{"id":1,"name":"foo","label":"Foo"},{"id":2,"name":"bar","label":"Bar"}]' | parse_json %}
{{ objects | map: 'name' }} => ['foo', 'bar']
```

</div>
<h2 class="font-weight-bold">map_attributes</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Array&gt;</tt>) - array of arrays with values for given keys



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>

  <li>attributes (<tt>Array&lt;String&gt;</tt>) - array of keys to be extracted </li>



<h4>Examples:</h4>

```liquid
items => [{id: 1, name: 'foo', label: 'Foo'}, {id: 2, name: 'bar', label: 'Bar'}]
{{ items | map_attributes: 'id', 'name' }} => [[1, 'foo'], [2, 'bar']]
```

</div>
<h2 class="font-weight-bold">markdownify</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - processed text with markdown syntax changed to HTML



<h4>Params:</h4>

  <li>text (<tt>String</tt>) - text using markdown syntax </li>



<h4>Examples:</h4>

```liquid
{{ '# Foo' | markdownify }} => '<h1>Foo</h1>'
```

</div>
<h2 class="font-weight-bold">matches</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Boolean</tt>) - whether the given string matches the given regular expression



<h4>Params:</h4>

  <li>text (<tt>String</tt>) - string we check against the regular expression </li>

  <li>regexp (<tt>String</tt>) - string representing a regular expression pattern against which
we try to match the first parameter </li>



<h4>Examples:</h4>

```liquid
{{ 'foo' | matches: '[a-z]' }} => true
```

</div>
<h2 class="font-weight-bold">new_line_to_br</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - replaces newlines in the input string with the <br /> HTML tag



<h4>Params:</h4>

  <li>html (<tt>String</tt>) - HTML string to be processed  <em>(defaults to: <tt>&#39;&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{% capture text %}
  foo
  bar
{% endcapture %}

{{ text | new_line_to_br }} => 'foo<br />bar'
```

</div>
<h2 class="font-weight-bold">pad_left</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - returns string padded from left to length of count with symbol character



<h4>Params:</h4>

  <li>str (<tt>String</tt>) - string to pad </li>

  <li>count (<tt>Integer</tt>) - minimum length of output string </li>

  <li>symbol (<tt>String</tt>) - string to pad with  <em>(defaults to: <tt>&#39; &#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 'foo' | pad_left: 5 }} => '  foo'

{{ 'Y' | pad_left: 3, 'X' }} => 'XXY'
```

</div>
<h2 class="font-weight-bold">parameterize</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - replaces special characters in a string so that it may be used as part of a 'pretty' URL;
the default separator used is '-';



<h4>Params:</h4>

  <li>text (<tt>String</tt>) - input string to be 'parameterized' </li>

  <li>separator (<tt>String</tt>) - string to be used as separator in the output string; default is '-'  <em>(defaults to: <tt>&#39;-&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 'John arrived_foo' | parameterize }} => 'john-arrived_foo'
```

</div>
<h2 class="font-weight-bold">parse_json</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Hash</tt>) - Hash created based on JSON



<h4>Params:</h4>

  <li>object (<tt>Object</tt>) - String containing valid JSON </li>



<h4>Examples:</h4>

```liquid
{% assign text = '{ "name": "foo", "bar": {} }' %}
{% assign object = text | parse_json %}
{{ object.name }} => 'foo'
```

</div>
<h2 class="font-weight-bold">pluralize</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - pluralized version of the input string



<h4>Params:</h4>

  <li>string (<tt>String</tt>) - string to be pluralized </li>

  <li>count (<tt>Number</tt>) - optional count number based on which string will be pluralized or singularized  <em>(defaults to: <tt>2</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 'dog' | pluralize: 1 }} => 'dog'
{{ 'dog' | pluralize: 2 }} => 'dogs'
```

</div>
<h2 class="font-weight-bold">pricify</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - formatted price using the global price formatting rules



<h4>Params:</h4>

  <li>amount (<tt>Numeric</tt>, <tt>String</tt>) - amount to be formatted </li>

  <li>currency (<tt>String</tt>) - currency to be used for formatting  <em>(defaults to: <tt>&#39;USD&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 1 | pricify }} => '$1 USD'
```

</div>
<h2 class="font-weight-bold">pricify_cents</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - formatted price using the global price formatting rules



<h4>Params:</h4>

  <li>amount (<tt>Numeric</tt>, <tt>String</tt>) - amount in cents to be formatted </li>

  <li>currency (<tt>String</tt>) - currency to be used for formatting  <em>(defaults to: <tt>&#39;USD&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 1 | pricify_cents }} => '$0.01 USD'
```

</div>
<h2 class="font-weight-bold">querify</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - a query string



<h4>Params:</h4>

  <li>hash (<tt>Hash{Object =&gt; Object}</tt>) - hash to be "querified" </li>



<h4>Examples:</h4>

```liquid
{{ hash }} => { 'name' => 'Dan', 'id' => 1 }
{{ hash | querify }} => 'name=Dan&id=1'
```

</div>
<h2 class="font-weight-bold">random_string</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - returns a random alphanumeric string of given length;



<h4>Params:</h4>

  <li>length (<tt>Int</tt>) - how many random characters should be included. Default 12  <em>(defaults to: <tt>12</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 10 | random_string }} => '6a1ee2629'
```

</div>
<h2 class="font-weight-bold">raw_escape_string</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - input string HTML-escaped; this will return a string whose HTML tags will be visible in
the browser



<h4>Params:</h4>

  <li>value (<tt>String</tt>) - input string to be HTML-escaped </li>



<h4>Examples:</h4>

```liquid
{{ 'foo<b>bar</b>' | raw_escape_string }} => 'foo&lt;b&gt;bar&lt;/b&gt;'
```

</div>
<h2 class="font-weight-bold">regex_matches</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Array&lt;String&gt;&gt;</tt>) - matches for the expression in the string;
each item in the array is an array containing all groups matches; for example
for the regex (.)(.) and the text 'abcdef', the result will look like:
[["a", "b"], ["c", "d"], ["e", "f"]]



<h4>Params:</h4>

  <li>text (<tt>String</tt>) -  </li>

  <li>regexp (<tt>String</tt>) - regexp to use for matching </li>



<h4>Examples:</h4>

```liquid
To retrieve the URL from a meta tag see the example below:
{% assign text = '<html><head><meta property="og:image" content="http://somehost.com/someimage.jpg" /></head><body>content</body></html>' | html_safe %}

{% assign matches = text | regex_matches: '<meta\s+property="og:image"\s+content="([^"]+)"' %}

{% if matches.size > 0 %}
  {% assign image_path = matches[0][0] %}
  {{ image_path }}
{% endif %}
```

</div>
<h2 class="font-weight-bold">reject</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - with objects from collection that don't match provided conditions



<h4>Params:</h4>

  <li>objects (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>

  <li>conditions (<tt>Hash</tt>) - hash with conditions { field_name: value }  <em>(defaults to: <tt>{}</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ objects }} => [{"foo":1,"bar":"a"},{"foo":2,"bar":"b"},{"foo":3,"bar":"c"},{"foo":2,"bar":"d"}]
{{ objects | reject: foo: 2 }} => [{"foo":1,"bar":"a"},{"foo":3,"bar":"c"}]
```

</div>
<h2 class="font-weight-bold">rotate</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - the input array rotated by a number of times given as the second
parameter; [1,2,3,4] rotated by 2 gives [3,4,1,2]



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array to be rotated </li>

  <li>count (<tt>Integer</tt>) - number of times to rotate the input array  <em>(defaults to: <tt>1</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{% assign numbers = "1,2,3" | split: "," %}
{{ numbers | rotate }} => [2,3,1]
```

</div>
<h2 class="font-weight-bold">sanitize</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) -



<h4>Params:</h4>

  <li>input (<tt>String</tt>) -  </li>

  <li>whitelist_attributes (<tt>Array&lt;String&gt;</tt>) -   <em>(defaults to: <tt>nil</tt>)</em> </li>

  <li>whitelist_tags (<tt>Array&lt;String&gt;</tt>) -   <em>(defaults to: <tt>nil</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{% capture link %}
  <a href="javascript:prompt(1)" target="_blank">Link</a>
{% endcapture %}
{{ link | sanitize }} => <a href="">Link</a>
{% assign whitelist_attributes = 'target' | split: '|' %}
{{ link | sanitize: whitelist_attributes }} => <a href="" target="_blank">Link</a>
```

</div>
<h2 class="font-weight-bold">select</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - with objects from collection that matches provided conditions



<h4>Params:</h4>

  <li>objects (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>

  <li>conditions (<tt>Hash</tt>) - hash with conditions { field_name: value }  <em>(defaults to: <tt>{}</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ objects }} => [{"foo":1,"bar":"a"},{"foo":2,"bar":"b"},{"foo":3,"bar":"c"},{"foo":2,"bar":"d"}]
{{ objects | select: foo: 2 }} => [{"foo":2,"bar":"b"},{"foo":2,"bar":"d"}]
```

</div>
<h2 class="font-weight-bold">sha1</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - SHA1 digest of the input object



<h4>Params:</h4>

  <li>object (<tt>String</tt>) - input object whose digest we want to obtain </li>



<h4>Examples:</h4>

```liquid
{{ 'foo' | sha1 }} => '0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33'
```

</div>
<h2 class="font-weight-bold">shuffle_array</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Array&gt;</tt>) - array with shuffled items



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>



<h4>Examples:</h4>

```liquid
items => [1, 2, 3, 4]
{{ items | shuffle_array }} => [3, 2, 4, 1]
```

</div>
<h2 class="font-weight-bold">slugify</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - replaces special characters in a string so that it may be used as part of a 'pretty' URL;



<h4>Params:</h4>

  <li>text (<tt>String</tt>) - input string to be 'slugified' </li>



<h4>Examples:</h4>

```liquid
{{ 'John arrived_foo' | slugify }} => 'john-arrived-foo'
```

</div>
<h2 class="font-weight-bold">strftime</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - formatted representation of the date object; the formatted representation
will be based on what the format parameter specifies



<h4>Params:</h4>

  <li>date (<tt>Date</tt>, <tt>Time</tt>, <tt>DateTime</tt>) - date object </li>

  <li>format (<tt>String</tt>) - string representing the desired output format </li>

  <li>zone (<tt>String</tt>) - string representing the time zone
e.g. '%Y-%m-%d' will result in something like '2020-12-12'  <em>(defaults to: <tt>nil</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ '2018-05-30T09:12:34.000-07:00' | strftime: '%Y-%m-%d %H:%M' }} => 2018-05-30 09:12

{% assign time = '2010-01-01 08:00' | to_time_from_str %}
{{ time | strftime: "%Y-%m-%d" }} => '2010-01-01'
```

</div>
<h2 class="font-weight-bold">subtract_array</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Array&lt;Object&gt;</tt>) - that is a difference between two arrays



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>

  <li>other_array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed </li>



<h4>Examples:</h4>

```liquid
{% assign array = '1,2' | split: ',' %}
{% assign other_array = '2' | split: ',' %}

{{ array | subtract_array: other_array }} => [1]
```

</div>
<h2 class="font-weight-bold">sum_array</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Numeric</tt>) - summarised value of array



<h4>Params:</h4>

  <li>array (<tt>Array&lt;Numeric&gt;</tt>) - array with values to be summarised </li>



<h4>Examples:</h4>

```liquid
{% assign numbers = '[1,2,3]' | parse_json %}
{{ numbers | sum_array }} => 6
```

</div>
<h2 class="font-weight-bold">time_diff</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Float</tt>) - duration between start and finish in unit - default: ms - milliseconds



<h4>Params:</h4>

  <li>start (<tt>Time</tt>, <tt>Number</tt>) -  </li>

  <li>finish (<tt>Time</tt>, <tt>Number</tt>) -  </li>

  <li>unit (<tt>String</tt>) - - time unit - allowed options are: d, days, h, hours, m, minutes, s, seconds, ms, milliseconds [default]  <em>(defaults to: <tt>&#39;ms&#39;</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{% assign start = "now" | to_time %}
[ ... ] your code goes here
{% assign stop = "now" | to_time %}
{% assign result = start | time_diff: stop, 'd' %}
{% log result %}
```

</div>
<h2 class="font-weight-bold">titleize</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - capitalizes all the words and replaces some characters in the string to create
a nicer looking title; it is meant for creating pretty output



<h4>Params:</h4>

  <li>text (<tt>String</tt>) - string to be processed </li>



<h4>Examples:</h4>

```liquid
{{ 'foo bar_zoo-xx' | titleize }} => 'Foo Bar Zoo Xx'
```

</div>
<h2 class="font-weight-bold">to_date</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Date</tt>) - a Date object obtained/parsed from the input object



<h4>Params:</h4>

  <li>datetime (<tt>Date</tt>, <tt>String</tt>, <tt>Object</tt>) - object from which we try to obtain/parse a date object </li>



<h4>Examples:</h4>

```liquid
{{ '2010-01-01 8:00:00' | to_date }} => 2010-01-01
```

</div>
<h2 class="font-weight-bold">to_mobile_number</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - returns mobile number in E.164 format; recommended for sending sms notifications



<h4>Params:</h4>

  <li>number (<tt>String</tt>) - the base part of mobile number </li>

  <li>country (<tt>String</tt>) - country for which country code should be used. Can be anything - full name, iso2, iso3  <em>(defaults to: <tt>nil</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ '500 123 999' | to_mobile_number: 'PL' }} => '+48500123999'
```

</div>
<h2 class="font-weight-bold">to_positive_integer</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Integer</tt>) -



<h4>Params:</h4>

  <li>param (<tt>Object</tt>) - value to be coerced to posivite integer </li>

  <li>default (<tt>Integer</tt>) - default value in case param is not valid positive integer </li>



<h4>Examples:</h4>

```liquid
{{ '1' | to_positive_integer: 2 }} => 1
{{ '' | to_positive_integer: 2 }} => 2
```

</div>
<h2 class="font-weight-bold">to_time</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>DateTime</tt>) - a time object created from parsing the string representation of time given as input



<h4>Params:</h4>

  <li>time (<tt>String</tt>, <tt>Integer</tt>) - a string representation of time for example 'today', '3 days ago' etc. a integer in unix time format </li>



<h4>Examples:</h4>

```liquid
{{ 'today' | to_time }} => 2017-04-15 15:21:00
{{ 'today' | to_time 'UTC' }} => 2017-04-15 15:21:00
{{ '1 day ago' | to_time }} => 2017-04-14 15:21:00
{{ '5 days from now' | to_time }} => 2017-04-14 15:21:00
{{ '2010:01:01' | to_time: '', '%Y:%m:%d' }} => 2010-01-01 00:00:00
```

</div>
<h2 class="font-weight-bold">translate</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - translation value taken from translations yml file for the key given as parameter



<h4>Params:</h4>

  <li>key (<tt>String</tt>) - translation key </li>

  <li>options (<tt>Hash{String =&gt; String}</tt>) - values passed to translation string  <em>(defaults to: <tt>{}</tt>)</em> </li>



<h4>Examples:</h4>

```liquid
{{ 'beer' | translate }} => 'cerveza'
```

</div>
<h2 class="font-weight-bold">url_for_path_with_token</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - returns a url for the given page slug, which includes user temporary token;





<h4>Examples:</h4>

```liquid
{{ '/account' | url_for_with_token: current_user }} => 'https://example.com/account?temporary_token=TOKEN_HERE'
```

</div>
<h2 class="font-weight-bold">useragent</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Hash</tt>) - parsed browser useragent information



<h4>Params:</h4>

  <li>useragent_header (<tt>String</tt>) - browser useragent from request header </li>



<h4>Examples:</h4>

```liquid
{{ context.headers.HTTP_USER_AGENT | useragent }} =>
{
  "device": {"family":"Other","model":"Other","brand":null},
  "family":"Firefox",
  "os":{"version":null,"family":"Windows 7"},
  "version":{"version":"47.0","major":"47","minor":"0","patch":null}
}
```

</div>
<h2 class="font-weight-bold">verify_access_key</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Boolean</tt>) -



<h4>Params:</h4>

  <li>access_key (<tt>String</tt>) - - can be obtained in Partner Portal </li>



</div>
<h2 class="font-weight-bold">video_params</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>Hash</tt>) - metadata about video



<h4>Params:</h4>

  <li>url (<tt>String</tt>) - url to a video on the internet </li>



<h4>Examples:</h4>

```liquid
{{ 'https://www.youtube.com/watch?v=8N_tupPBtWQ' | video_params }}
=> {"provider"=>"YouTube", "url"=>"https://www.youtube.com/watch?v=8N_tupPBtWQ", "video_id"=>"8N_tupPBtWQ", "embed_url"=>"https://www.youtube.com/embed/8N_tupPBtWQ", "embed_code"=>"<iframe src=\"https://www.youtube.com/embed/8N_tupPBtWQ\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>"},
```

</div>
<h2 class="font-weight-bold">videoify</h2>
<div class="border-bottom mb-5 pb-5">

<h4>Returns:</h4>

(<tt>String</tt>) - if the given url is supported, an HTML formatted string containing a video player (inside an iframe)
which will play the video at the given url; otherwise an empty string is returned



<h4>Params:</h4>

  <li>url (<tt>String</tt>) - url to a video on the internet  <em>(defaults to: <tt>&#39;&#39;</tt>)</em> </li>



</div>



{% endraw %}
