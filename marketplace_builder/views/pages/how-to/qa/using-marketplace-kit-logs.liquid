---
converter: markdown
metadata:
  title: Using Marketplace Kit Logs
  description: This guide will help you use Marketplace Kit Logs. This feature allows you to create your own logs, set them up as type info, debug, or error, and list them in your console next to your sync. 
slug: how-to/qa/using-marketplace-kit-logs
searchable: true
---

This guide will help you use Marketplace Kit Logs. This feature allows you to create your own logs, set them up as type info, debug, or error, and list them in your console next to your sync. 

## Requirements
So that you can follow the steps in this tutorial, you have to have the Marketplace Kit installed, an environment configured, and the required directory structure set up. You should be familiar with Pages, and the technologies behind Platform OS, especially GraphQL. 

* [Quickstart Guide](/get-started/quickstart-guide) or [Setup tutorials](/get-started/setup): help you get access to our platform, set up a site, install the Marketplace Kit, set up the required directory structure, and deploy to your site. 
* [Technologies](/how-platformos-works/technologies)

## Steps

Using Marketplace Kit Logs is a four-step process:

1. Create GraphQL mutation
2. Create page
3. Start logging
4. Use logs in other files (optional)

### Step 1: Create GraphQL mutation
Create a GraphQL mutation (a GraphQl query that sends information to the server) called `log` that takes two arguments: `type` and `message`.

#### `marketplace_builder/graph_queries/log.graphql`:

<pre><code class="language-graphql">
mutation log($type: LogEntryType = debug, $message: Any!) {
  log(type: $type, message: $message) {
    id
  }
} 
</code></pre>

#### Notes:
`LogEntryType` is an enum, it can take one of three different values: `info`,`debug`, or `error`. `message` is a string. 

The `log` endpoint takes two arguments, and returns the `id` of the log entry. You could also return `message` here. 

### Step 2: Create page
Create a page and sync it (e.g. to staging). 

<pre><code class="language-liquid">
---
slug: log-test
---

{% execute_query 'log', type: 'debug', message: 'Debug message' %}
{% execute_query 'log', type: 'info', message: 'Info message' %}
{% execute_query 'log', type: 'error', message: 'Error message' %}
</code></pre>

### Step 3: Start logging
In your command line, enter the command to start live logging:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
marketplace-kit logs staging
</code></pre>

This pulls the logs from the server every couple of seconds and displays them in your command line. 

### Step 4: Use logs in other files
You can use the logs in any other files that accept Liquid, so you can use them in pages, layouts, partials, Authorization Policies, async callbacks, etc.

You can also capture the `message` from Liquid, so for example, you can take parameters from the URL and include them in the message. 

<pre><code class="language-liquid">
---
slug: log-test
---

{% capture message %}
User params: {{ params.user_name }} 
{% endcapture %}

{% execute_query 'log', type: 'error', message: message %}
</code></pre>

You can grab any GraphQL query, assign it to the message variable, and pass it down to the log. 

{% include 'shared/questions_section' %} 
  

 

 




