---
converter: markdown
metadata:
  title: Setting up the Instance
  description: Tutorial on how to build e-commerce sites powered by PlatformOS
slug: how-to/e-commerce/setting-up-the-instance
searchable: true
---

{% include 'how-to/e-commerce/tutorial-info' %}

Now that we have our business rules and static designs figured out we can proceed with building our online store.

Setting up a new instance has been described in detail in our [Quickstart guide](/get-started/quickstart-guide). Go through the process of configuring new instance in the [partner portal](https://portal.apps.near-me.com/), installing [marketplace-kit](https://www.npmjs.com/package/@platform-os/marketplace-kit) on your machine, creating a default folder structure with

```shell
marketplace-kit init
```

command. In your project folder you will now see a new folder called `marketplace_builder`. It contains all of necessary folders where our views, models, queries etc will be stored. You can read more about the structure in [Platform OS Components](/how-platformos-works/platformos-components) article in our documentation.

We **strongly** suggest using some version of source control to store your code, so go ahead and create a new repository and commit your initial version of the code now.

Everything ready? We can proceed to preparing our views.

## Transforming static HTML files to static pages

At the end of the design process we usually get a number of HTML files that represent sections of the site. Same is true for our project, but for the sake of simplicity we’ve decided to go with pure [Bootstrap](http://getbootstrap.com) styles and scripts, hosted on their CDN.

Since all we’ve got to worry about is HTML, we will start coding with moving our HTML templates to pOS pages and partials. At the end of the process we should have a prototype, with clickable links that will take us between specific sections of the site.

Running the `init` command provides us with a sample layout and some partials. They are a good starting point for implementing our own layout.

### Beginning work

We are ready to start tinkering. Our instance should be created, so it’s time to configure local environment for working with remote instance. Use `marketplace-kit` to add a new `development` environment and then you can run

```shell
marketplace-kit sync development
```

to automatically update instance with changes made on your local machine.

### Adding static content

We will start with creating a file `views/layouts/application.liquid` to create a default layout for all pages. A good rule of thumb is keeping common sections of HTML (e.g. `<head>` or navigation) that should appear on every single page in their own partials. It will help us to stay DRY whenever we want to add a new layout.

Now, with our main partial we can create page placeholders with static HTML, that we will gradually transform to dynamic content in following parts of this tutorial.

{% include 'how-to/e-commerce/nav' %}

{% include 'shared/questions_section' %}
