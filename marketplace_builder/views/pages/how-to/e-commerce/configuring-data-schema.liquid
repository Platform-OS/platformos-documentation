---
converter: markdown
metadata:
  title: Configuring Data Schema
  description: Tutorial on how to build e-commerce sites powered by PlatformOS
slug: how-to/e-commerce/configuring-data-schema
searchable: true
---

{% include 'how-to/e-commerce/tutorial-info' %}

In PlatformOS we are pretty much free to build any kind of data model we want. Defining data schema is very similar to creating any other relational database. We can use one of the many tools to create a visual representation of the model. We’ve gone with [dbdiagram.io](https://dbdiagram.io/).

{% include 'how-to/e-commerce/data-model-graph' %}

Our data schema will be based on three primary models - `user`, `product` and `order`. On PlatformOS side we will use `User` to map the corresponding model and `Custom Model Type` to represent everything else.

## Product

Every t-shirt in our store will be described by `product_type` and `brand`. Additionally every product may have one or more `photo` attached. Finally, there is a mater of available variants of the product (in our case it’s t—shirt sizes). We will create `stock_level` tht will hold information on the available amount of products in specific variant (size).

```yaml
# custom_model_types/product.yml
name: product
custom_attributes:
  - name: name
    attribute_type: string
  - name: description
    attribute_type: text
  - name: sex
    attribute_type: string
  - name: price
    attribute_type: int
  - name: brand_id
    attribute_type: string
  - name: product_type_id
    attribute_type: string
```

Few items worth noting:

- PlatformOS does not support `enum` data type at the moment. We will handle that on the frontend side with constants.
- Price will stored as an integer, representing cents, so \$1.00 is stored as `100`. This helps us to avoid problematic computations and rounding problems that sometime happen with `float` data type.
- External ids are integer numbers but since variable types are important and `"100" != 100` it’s easier to store all IDs as strings. We will talk more on this problem in later chapters.

```yaml
# custom_model_types/brand.yml
name: brand
custom_attributes:
  - name: name
    attribute_type: string
```

```yaml
# custom_model_types/product_type.yml
name: product_type
custom_attributes:
  - name: name
    attribute_type: string
```

```yaml
# custom_model_types/photo.yml
name: photo
custom_attributes:
  - name: product_id
    attribute_type: string
  - name: image
    attribute_type: image
    attribute_type: photo
    versions_configuration:
      thumb:
        width: 250
        height: 345
        transform: resize_to_fill
      mini:
        width: 500
        height: 800
        transform: resize_to_fit
      normal:
        width: 1500
        height: 1200
        transform: resize_to_fit
```

`photo` model will be using special field type called, well, `photo`. It helps automating upload and versions creation. You can [read more on `Custom Images`](/reference/custom-attributes/custom-images).

```yaml
# custom_model_types/stock_level.yml
name: stock_level
custom_attributes:
  - name: product_id
    attribute_type: string
  - name: variant
    attribute_type: string
  - name: amount
    attribute_type: int
```

## User

`User` is a built-in data type in PlatformOS. It has some predefined fields already `name` and `email`. We can extend `User` with additional custom attributes by using user profiles. We will use `default` user profile to add a phone number field.

```yaml
# user_profile_types/default.yml
name: default
custom_attributes:
  - name: phone
    attribute_type: string
  - name: admin
    attribute_type: boolean
```

Every user will also be able to save multiple `addresses` to his contact book.

```yaml
name: address
custom_attributes:
  - name: label
    attribute_type: string
  - name: location
    attribute_type: string
  - name: default_address
    attribute_type: boolean
```

{% capture content %}
As you’ve probably noticed we’ve omitted `user_id` attribute. Every `Custom Model Type` in PlatformOS can be attached to another object via built-in `customizable_type` and `customizable_id` fields. We will be setting these values when creating forms.
{% endcapture %}
{% include 'alert/note', content: content %}

{% capture content %}
PlatformOS has a special field type called `CustomAddress`. It allows geolocation and detailed validation of the address. We will not be using that in this example, but go ahead and [read more on `Custom Address` field](/reference/custom-attributes/custom-addresses) on our documentation site.
{% endcapture %}
{% include 'alert/note', content: content %}

## Order

Last part of our shop data schema is related to `order`s created by clients. Every order can have multiple products attached and a `shipping_option` selected during checkout. Order is finished with `payment`, we will store history of all payments for given order (usually it will be just one, but we want to log every interaction with payments API as separate entry). Finally, we will store `order_history` describing any changes to order state (received, paid, shipped, etc.)

```yaml
# custom_model_types/order.yml
name: order
custom_attributes:
  - name: billing_address
    attribute_type: text
  - name: shipping_address
    attribute_type: text
  - name: shipping_option_id
    attribute_type: string
  - name: shipping_option_name
    attribute_type: string
  - name: shipping_price
    attribute_type: int
  - name: comments
    attribute_type: text
  - name: state
    attribute_type: string
```

```yaml
# custom_model_types/order_product.yml
name: order_product
custom_attributes:
  - name: product_id
    attribute_type: string
  - name: order_id
    attribute_type: string
  - name: name
    attribute_type: string
  - name: variant
    attribute_type: string
  - name: amount
    attribute_type: int
  - name: price
    attribute_type: int
```

You’ve probably noticed that some fields are duplicated (shipping) or not referencing other custom types by id (addresses). We want to ensure that order data is persistent and do not change after order has been created. If at any point in time admin would remove the shipping option used in this order, or user updates his address in the address book, our order would no longer represent state at the moment of creation. Therefore, we will copy any piece of information prone to being manipulated, when the new order is created. Same logic applies to `order_product` table where we store information on the ordered products, along with the reference to the product itself. In case product is removed, or updated, we do not loose any data.

```yaml
# custom_model_types/order_history.yml
name: order_history
custom_attributes:
  - name: order_id
    attribute_type: string
  - name: state
    attribute_type: string
```

```yaml
# custom_model_types/payment.yml
name: payment
custom_attributes:
  - name: order_id
    attribute_type: string
  - name: state
    attribute_type: string
```

{% capture content %}
Our data diagram mentioned `timestamp` field for both `payment` and `order_history` data types. Fortunately, PlatformOS automates creation of timestamps for us. Every object gets two fields built-in fields `created_at` and `updated_at` that are set automatically.
{% endcapture %}
{% include 'alert/note', content: content %}

```yaml
# custom_model_types/shipping_option.yml
name: shipping_option
custom_attributes:
  - name: name
    attribute_type: string
  - name: price
    attribute_type: int
```

## Summary

With all configuration files for our data schema in place we can move on to the next step, which is building admin section, where we will be able to add and modify t-shirts.

## Next steps

- Next: Admin panel
- Previous: [Setting up the instance](/how-to/e-commerce/setting-up-the-instance)

{% include 'shared/questions_section' %}
