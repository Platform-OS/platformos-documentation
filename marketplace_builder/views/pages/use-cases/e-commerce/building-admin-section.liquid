---
converter: markdown
metadata:
  title: Building the Admin Section
  description: This guide will help you set up a secured section on the site, where you can manage all products and orders in your online store.
slug: use-cases/e-commerce/building-admin-section
searchable: true
---

This guide will help you set up a secured section on your e-commerce  site, where you can manage all products and orders in your online store.

{% include 'alert/note', content: 'This guide is part of a tutorial series on building an e-commerce website powered by platformOS. <a href="/use-cases/e-commerce/e-commerce-platformos">Find the first part of the series here.</a>' %}

## Requirements

To follow this tutorial, you should be familiar with basic platformOS concepts, and the topics in the Get Started section. You should have configured the data model, as described in a previous part of this tutorial series.

- [How platformOS Works](/how-platformos-works)
- [Get Started](/get-started)
- [Configuring the Data Schema](/use-cases/e-commerce/configuring-data-schema)
- [Migrating Data](/tutorials/migrations/migrating-data)
- [Adding an Authorization Policy](/tutorials/authorization-policy/authorization-policy)
- [Signing in a User Manually](/tutorials/users/signing-in-user-manually)
- [Logging Out an Authenticated User](/tutorials/users/logging-out-authenticated-user)

## Steps

Building a secured admin section is a five-step process:

<div data-autosteps></div>

### Step 1: Create an admin user

Your admin panel should be accessible only to admin users, but you don’t have one just yet. After creating the instance, your user from the Partner Portal has been automatically added to your Instance. It’s now necessary to grant admin credentials to that user. You can use [migrations](/tutorials/migrations/migrating-data) to do that.

Go to the terminal and run the following command to create your first migration:

```shell
marketplace-kit migrations generate development add_admin
```

This should create a new file in your `migrations` folder.

#### marketplace_builder/migrations/{TIMESTAMP}\_add_admin.liquid

```liquid
{% raw %}
{% query_graph 'get_user', result_name: g, email: "your-email@example.com" %}
{% assign user_id = g.users.first.id %}
{% execute_query "promote_user_to_admin", id: user_id %}
{% execute_query "set_user_password", id: user_id, password: 'admin' %}
{% endraw %}
```

{% capture content %}
`{TIMESTAMP}` is going to be a 12 digit number representing the date and time when the migration was created. You will use this in a moment to run the migration.
{% endcapture %}
{% include 'alert/note', content: content %}

You need three more files to make it work. First, create a generic `get_user` query.

#### marketplace_builder/graph_queries/get_user.graphql

```graphql
query get_user($id: ID, $email: String, $slug: String) {
  user(id: $id, email: $email, slug: $slug) {
    id
    name
    email
    profile(profile_type: "default") {
      properties
    }
  }
}
```

{% capture content %}
You can build queries with additional parameters, to make them more versatile. Empty parameters are omitted when query is executed.
{% endcapture %}
{% include 'alert/note', content: content %}

{% capture content %}
`properties` is a special keyword, that will list all of custom properties attached to the object, so you do not have to list them all one by one.
{% endcapture %}
{% include 'alert/note', content: content %}

#### marketplace_builder/graph_queries/user/mutations/promote_user_to_admin.graphql

```graphql
mutation promote_user_to_admin($id: ID) {
  user_update(
    form_configuration_name: "promote_user_to_admin_form"
    id: $id
    user: {
      profiles: [
        {
          name: "default"
          values: { properties: [{ name: "admin", value: "true" }] }
        }
      ]
    }
  ) {
    id
  }
}
```

#### marketplace_builder/form_configurations/user/promote_user_to_admin_form.liquid

```yaml
---
name: promote_user_to_admin_form
resource_owner: "anyone"
resource: User
fields:
  profiles:
    default:
      properties:
        admin:
---

```

There is one more thing to do. When the Instance was created, your user has been copied, but for security reasons its password was set to a random string. You have to update it as well. You need to add one more mutation and form configuration to do just that.

#### marketplace_builder/graph_queries/user/mutations/set_user_password.graphql

```graphql
mutation set_user_password($id: ID, $password: String) {
  user_update(
    form_configuration_name: "set_user_password_form"
    id: $id
    user: { password: $password }
  ) {
    id
  }
}
```

#### marketplace_builder/form_configurations/user/set_user_password_form.liquid

```liquid
---
name: set_user_password_form
resource_owner: "anyone"
resource: User
fields:
  password:
---
```

{% capture content %}
Right now this form configuration is not secure. You had to set `resource_owner` to `anyone` so it can be executed by a logged out user, but it should be set to `self` once the migration is done. This way the user will only be able to change their own password.
{% endcapture %}
{% include 'alert/important', content: content %}

Once all of these files are ready, you can run the migration with the marketplace-kit command. Substitute `TIMESTAMP` with migration ID from your own file.

```shell
marketplace-kit migrations run development TIMESTAMP
```

### Step 2: Create an Authorization Policy

Your user now has the required admin credential. This allows you to create your first [Authorization Policy](/tutorials/authorization-policy/authorization-policy), that you can use to secure the form you’ve just created in the previous step and reuse it to limit access to all resources in the admin panel.

#### marketplace_builder/authorization_policies/admin_user.liquid

```liquid
---
name: admin_user
redirect_to: /unauthorized
flash_alert: Sorry, you have to be an admin user to access this page.
---
{% raw %}
{% query_graph 'current_user', result_name: "g" %}
{% if g.current_user.profile.properties.admin %}true{% endif %}
{% endraw %}
```

#### marketplace_builder/graph_queries/current_user.graphql

```grapqhl
query current_user {
  current_user {
    id
    name
    email
    profile(profile_type: "default") {
      properties
    }
  }
}
```

{% capture content %}
You’ll notice, that this query is identical to the `get_user` query apart from having no parameters, and using the `current_user` endpoint instead. It always returns the currently authorized user.
{% endcapture %}
{% include 'alert/note', content: content %}

Now, that the Authorization Policy is in place, you can go ahead and modify the `promote_user_to_admin_form` form, so that only admins can promote other users to admins from now on.

#### marketplace_builder/form_configurations/user/promote_user_to_admin_form.liquid

```yaml
name: promote_user_to_admin_form
resource_owner: "anyone"
resource: User
fields:
  profiles:
    default:
      properties:
        admin:
authorization_policies: [admin_user]
---
```

### Step 3: Create a sign-in form

You are ready to create the sign-in form for your application. Sign-up will come later, after you’ve finished the management section of the app.

The whole process has been described in our documentation in the [Signing in User Manually](/tutorials/users/signing-in-user-manually) article.

You’ll need a new page and form configuration file.

#### marketplace_builder/views/pages/sign-in.html.liquid

```liquid
{% raw %}
---
slug: sign-in
layout_name: authorization
metadata:
  title: Sign in
---
{% include_form 'sign_in_form' %}

<hr>

<p>
  Don’t have an account yet?
  <a href="/sign-up">Sign up as a new user</a>
</p>

{% endraw %}
```

{% capture content %}
You can also use a new layout file [`views/layouts/authorization.html.liquid`](https://github.com/mdyd-dev/e-commerce/blob/master/marketplace_builder/views/layouts/authorization.liquid) to make the authorization screens a bit more compact.
{% endcapture %}
{% include 'alert/note', content: content %}

#### marketplace_builder/form_configurations/session/sign_in_form.liquid

```liquid
{% raw %}
---
name: sign_in_form
resource: Session
flash_notice: 'You are now logged in'
redirect_to: >
  {%- query_graph 'current_user', result_name: "g" -%}
  {%- if g.current_user.profile.properties.admin -%}
    /admin
  {%- else -%}
    /
  {%- endif -%}
fields:
  email:
  password:
---
{% form %}
  <div class="form-group">
    <label for="sign-in-email">Email</label>

    <input
      type="email"
      class="form-control{% if form_builder.errors.email != blank %} is-invalid{% endif %}"
      id="sign-in-email"
      value="{{ form_builder.fields.email.value }}"
      name="{{ form_builder.fields.email.name }}"
    />

    {% if form_builder.errors.email %}
      <div class="invalid-feedback">{{ form_builder.errors.email }}</div>
    {% endif %}
  </div>
  <div class="form-group">
    <label for="sign-in-password">Password</label>

    <input
      type="password"
      class="form-control{% if form_builder.errors.email != blank %} is-invalid{% endif %}"
      id="sign-in-password"
      name="{{ form_builder.fields.password.name }}"
    />

    {% if form_builder.errors.password %}
      <div class="invalid-feedback">{{ form_builder.errors.password }}</div>
    {% endif %}
  </div>

  <div class="form-group row">
    <div class="col-sm-12">
      <button type="submit" class="btn btn-primary">Sign in</button>
    </div>
  </div>
{% endform %}

{% endraw %}
```

{% capture content %}
Input fields are a prime candidate for refactoring, as there is a lot of repetition and common logic that can be implemented with shared partials.
{% endcapture %}
{% include 'alert/note', content: content %}

### Step 4: Create a sign-out form

Now that you can sign in, you should be able to sign out as well. [Logging Out an Authenticated User](/tutorials/users/logging-out-authenticated-user) describes well what needs to be done. You’ll add the form configuration now, so that it’s ready when you are working on the top navigation and the sign out button.

#### marketplace_builder/form_configurations/session/sign_out_form.liquid

```liquid
{% raw %}
---
name: sign_out_form
resource: Session
---
{% form method: 'delete' %}
  <button type="submit" class="dropdown-item">Log out</button>
{% endform %}
{% endraw %}
```

### Step 5: Create a protected page

All that is left is to add an admin index page and make sure only admins can access it.

#### marketplace_builder/views/pages/admin/index.liquid

```liquid
---
slug: admin
authorization_policies: [admin_user]
metadata:
  title: Admin panel
---
<p>Only admins can access this page.</p>
```

## Next steps

Congratulations! You’ve promoted your user to an admin, created sign-in and sign-out forms and added a protected area that will be used to add all administration functionalities for the website.

You are ready to do some [views refactoring with shared partials](/use-cases/e-commerce/using-shared-partials) to make sure that further development goes smoothly.

{% include 'shared/questions_section' %}
