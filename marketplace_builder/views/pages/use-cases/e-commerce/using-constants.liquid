---
converter: markdown
metadata:
  title: Using Constants 
  description: This guide will help you set up constants for your e-commerce site. 
slug: use-cases/e-commerce/using-constants
searchable: true
---

This guide will help you set up constants for your e-commerce site. 

Every T-shirt in the store has three predefined properties - gender, brand, and type. Brand and type are stored in a database, as these data sets change quite often. Gender is limited to just a couple of options to begin with, so it’s better to define it as a constant and store it directly in the code.

{% include 'alert/note', content: 'This guide is part of a tutorial series on building an e-commerce website powered by PlatformOS. <a href="/use-cases/e-commerce/e-commerce-platformos">Find the first part of the series here.</a>' %}

## Requirements

To follow this tutorial, you should be familiar with basic PlatformOS concepts, and the topics in the Get Started section. You should have followed this tutorial series up to the previous part "Using Shared Partials".

- [How Platform OS Works](/how-platformos-works)
- [Get Started](/get-started)
- [Using Shared Partials](/use-cases/e-commerce/using-shared-partials)
- [Configuring Data Schema](/use-cases/e-commerce/configuring-data-schema)
- [YAML front matter](/how-platformos-works/glossary#frontmatter-yaml)

## Steps

Setting up constants is a three-step process:

1. Create `common` partial
2. Include `common` partial on top of every page
3. Include `common` partial as needed in other parts of application

### Step 1. Create `common` partial

In [Configuring Data Schema](/use-cases/e-commerce/configuring-data-schema), you created a diagram, that defined `gender` as an `enum` field. You can emulate that by creating a `string` field type and ensure that it’s only ever filled with predefined values: `male` and `female`.

You might be wondering, why bother with any kind of special configuration and not just reuse these values throughout the application? Whenever a new developer joins the project, or you have to do some changes in a few months, a question may arise - _&ldquo;Is it `men` and `women`? Or maybe `he` and `she`?&rdquo;_

By referring to the value by reference rather than using it directly, we ensure higher quality of code and avoid ambiguity.

#### marketplace_builder/views/partials/common.liquid

```liquid
{% raw %}
{%- parse_json GENDER %}
{
  "MALE": "Men",
  "FEMALE": "Women"
}
{% endparse_json -%}
{% endraw %}
```

{% capture content %}
Using uppercase to indicate a constant is a common convention in many programming languages.
{% endcapture %}
{% include 'alert/tip', content: content %}

{% capture content %}
You might consider adding some common queries in here as well, but keep in mind that by design they will be executed multiple times _on every page load_, which may and probably will negatively impact performance of your application.
{% endcapture %}
{% include 'alert/warning', content: content %}

### Step 2. Include `common` partial on top of every page

#### marketplace_builder/views/pages/admin/index.liquid

```liquid
{% raw %}
---
slug: admin
authorization_policies: [admin_user]
metadata:
  title: Admin panel
---
{% include "common" %}
<p>Only admins can see this now.</p>
{% endraw %}
```

By including this line on top of every page in your application you ensure that constants will be available in every included partial further down the partials tree.

### Step 3. Include `common` partial as needed in other parts of application

Including it on top of the page does not make the constants available in:

- application layout
- inside of [YAML front matter](/how-platformos-works/glossary#frontmatter-yaml) of form configurations
- Authorization Policies
- notifications

Whenever you need access to constants inside any of these places, you’ll need to include the partial again.

## Next steps

Congratulations! You’ve set up constants for your application. You are now ready to seed initial configuration data. 

* [Seeding Configuration Data](use-cases/e-commerce/seeding-configuration-data)

{% include 'shared/questions_section' %}
