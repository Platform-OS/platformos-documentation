---
converter: markdown
metadata:
  title: Creating a Module
  description:
slug: tutorials/modules/creating-module
searchable: true
---

This guide will help you learn how to create a module by walking you through the steps of creating a simple module.

## Requirements

This is an advanced tutorial. To follow it, you should be familiar with basic PlatformOS concepts, the topics in the Get Started section, and modules.

* [How PlatformOS Works](/how-platformos-works)
* [Get Started](/get-started)
* [Modules](/tutorials/modules/modules)

## Steps

Creating a module is a three-step process:

1. Create directories
2. Create GraphQL queries
3. Create page


### Step 1: Create directories

Create two directories inside the `modules` directory called `admincms`, then create the `public` and `private` folders inside it. Place the `graph_queries` directory inside `private`, and the `views/pages` directories inside public.

See the structural overview of the module you'll create here for reference:

```shell
admincms
├── private
│   └── graph_queries
│       ├── get_customizations.graphql
│       └── get_pages.graphql
└── public
    └── views
        └── pages
            └── admin.liquid
```

### Step 2: Create GraphQL queries

Create a GraphQL query that pulls a list of Customizations.

#### admincms/private/graph_queries/get_customizations.graphql

```graphql
query get_customizations {
  customizations(
    per_page: 10
    sort: [{ name: "id", order: "desc" }]
  ) {
    results {
      human_name
      properties
    }
  }
}
```

Create another GraphQL query that pulls a list of pages

#### admincms/private/graph_queries/get_pages.graphql

```graphql
query get_pages {
    pages(per_page: 10) {
    results {
      format
      slug
    }
  }
}
```

### Step 3: Create page

#### A note on naming conventions and paths

Configuration files placed in a module are treated a bit differently than regular files.
To avoid conflicts between the code of a module and regular code (or between modules) a namspacing strategy is used.

##### Namspacing rules

1. assets (JavaScript, CSS, images) - paths for those files are prefixed with *modules/MODULE_NAME*

For example if you have asset in a file called 'app.css' in a module named "admin" to include it you should use

```liquid
 <link rel="stylesheet" media="screen" href="{{ 'modules/admin/app.css' | asset_url }}">
```

 The same thing works for JavaScript files, for example:

```liquid
<script src="{{ 'modules/admin/admin.js' | asset_url }}"></script>
```

2. Partials

Partials can use full path with the prefix this is a bit longer but allows us to avoid ambiguity

```liquid
{%- include 'modules/blog/private/views/partials/comments' -%}
```

3. Layouts

Layouts have the same prefix so when you use them you should do it in the following way

```liquid
slug: 'admin/settings'
format: html
layout_name: 'modules/admin/layouts/settings'
```

4. Other resources (Authorization Policy, Graph Query, etc.)

When creating a module you don't have to add prefix to the name but when you use it (inside or outside of module scope) you have to provide
the 'module_name/' prefix. Some examples:

```liquid
{% comment %} Definition stays the same {% endcomment %}
---
name: can_view_blog_posts
redirect_to: 'blog'
flash_alert: 'Please log in to access this page.'
---
{% query_graph "blog/get_blog_user", result_name: g %}
{% comment %}
 if g.current_user and g.current_user.admin_profile true endif
{% endcomment %}
true

{% comment %} But is used with a prefix {% endcomment %}
authorization_policies:
  - 'blog/can_view_blog_posts'
```

```liquid
{% comment %} Query stays the same {% endcomment %}

query get_blog_instance(
  $current_user_id: ID
  $slug: String
  $scope: String
) {
  customizations(
  ...
) {
}

{% comment %} But you use it with the module prefix {% endcomment %}
{%- query_graph 'blog/get_blog_instance', scope: 'blog', result_name: bi, slug: url_params.slug -%}
```

#### admincms/public/views/pages/admin.liquid

```liquid
{% raw %}
---
slug: admincms
---

<h2> Module example - Admin </h2>

<div class="row">
  <div class="col-xs-12 col-lg-6">
    <h3> Customizations </h3>
    {%- query_graph "admin/get_customizations", result_name: "c" -%}
    <table class="table table-compact">
      <thead>
        <tr>
          <th> Name </th>
          <th> Properties </th>
        </tr>
      </thead>
      <tbody>
        {% for customization in c.customizations.results %}
          <tr>
            <td> {{ customization.human_name }} </td>
            <td> {{ customization.properties }} </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>

  <div class="col-xs-12 col-lg-6">
    <h3> Pages </h3>
    {%- query_graph "admin/get_pages", result_name: "c" -%}
    <table class="table table-compact">
      <thead>
        <tr>
          <th> Slug </th>
          <th> Format </th>
        </tr>
      </thead>
      <tbody>
        {% for page in c.pages.results %}
          <tr>
            <td> {{ page.slug }} </td>
            <td> {{ page.format }} </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>
</div>
{% endraw %}
```

As you can see you are using the queries like usual but the name is prefixed with the module name

```liquid
{% raw %}
{%- query_graph "admin/get_pages", result_name: "c" -%}
{% endraw %}
```

The only difference between this code and code of a regular Instance is that this module code is split
into public and private folders, and if you'd pull the code when it's installed on an Instance,
you would get a structure like this:

```shell
.
├── marketplace_builder
│   └── views
|   └── graph_queries
│       ...
└── modules
    └── admin
        └── public
            └── views
                └── pages
                    └── admin.html.liquid
```

## Live example and source code

To see it in action go to [live example](https://nearme-example.staging-oregon.near-me.com/admincms).
[Source files](https://github.com/mdyd-dev/marketplace-nearme-example/tree/master/marketplace_builder/modules/admincms) are also publicly accessible.

## Next steps
Congratulations! You have created a module. Now you can learn about sharing your module on the PlatformOS Module Marketplace.

* [Sharing a Module](/tutorials/modules/sharing-module)

{% include 'shared/questions_section' %}
