---
converter: markdown
metadata:
  title: Form Validation
  description: Form Validation gives you full control over the data format accepted by the form.
slug: tutorials/forms/validation
searchable: true
---

**Validations** are used to ensure that only valid data is saved into your database.
This reference shows you how to validate the state of objects before they go into the database using Form Configuration's validations feature.

After reading this reference, you will know:

* How to configure form validation
* How to render validation errors

## Example

Simple validation example:

```yaml
fields:
  properties:
    title:
      validation:
        presence: true
```

A form with the above configuration will not be valid without title property passed with the request unless it's already set on the object passed to the form.

## Validation types

You can use the following validation types:

### presence

```yaml
title:
  validation:
    presence: true
```

### unique

```yaml
fields:
  properties:
    slug:
      validation:
        presence: true
        unique:
          scope:
            - other_property
          message: Must be uniq
```

### confirmation

This validation is used when there is a need to enter the same value twice.

When you set it to true, system will require second form value to be sent to validate. Field will be named `<field_name>_confirmation.`

For example `password` field with `confirmation: true` will expect both `password` and `password_confirmation` fields to be equal.

This means you need to add `password_confirmation` field to your form configuration. Because it does not have to be saved into database, it can be virtual.

Default error message for this validator is "doesn't match %{attribute}".

```yaml
password:
  validation:
    confirmation: true
password_confirmation:
  property_options:
    virtual: true
```

### inclusion / exclusion

```yaml
   malpractice_history:
      validation:
        inclusion:
          in: [true, false]
          message: disclosure is required
```

### format

```yaml
phone:
  validation:
    presence: true
    format:
      with: \A[+]?[\d \-()]+\z
      allow_blank: true
      message: This seems to be an invalid phone number. Please try using numbers only
```

### file_content_type

```yaml
custom_attachments:
  document:
    file:
      validation:
        presence: true
        file_content_type:
          allow:
          - image/jpeg
          - image/png
          - application/pdf
          - application/msword
          - application/vnd.ms-excel
```

### file_extension

Validation of file extension uploaded as `custom_attachment`:

Example:

```yaml
custom_attachments:
  document:
    file:
      validation:
        file_extension:
          allow:
          - .doc
          - .docx
```

### length

```yaml
attachments:
  validation:
    length:
      is: 2
      message: You need to include Frontside and Backside Photo ID
```

The possible length constraint options are:

| Validation | Description | Default error message |
|-----------|-------------|------------------------|
| minimum | Cannot have less than the specified number | is too short (minimum is %{count} characters) |
| maximum | Cannot have more than the specified number | is too long (maximum is %{count} characters) |
| is | The attribute length must be equal to the given number. | is the wrong length (should be %{count} characters) |

### numericality

```yaml
rate_amount:
  validation:
    presence: true
    numericality:
      greater_than_or_equal_to: 0
```

Available options are:

| Validation | Description | Default error message |
|-----------|-------------|------------------------|
| greater_than | Input must be greater than the set value | must be greater than %{count} |
| greater_than_or_equal_to | Input must be greater than or equal to the set value | must be greater than or equal to %{count} |
| equal_to | Input must be equal to the set value | must be equal to %{count} |
| less_than | Input must be less than the set value | must be less than %{count} |
| less_than_or_equal_to | Input must be less than or equal to the set value | must be less than or equal to %{count} |
| other_than | Input must be other than the set value | must be other than %{count} |
| odd | Input must be an odd number if set to true | must be odd |
| even | Input must be an even number if set to true | must be even |

## Conditional Validation

It is possible to validate attributes based on the state of other attributes from the form.
{% raw %}
```yaml
expiry_year:
  validation:
    presence:
      if: '{% if form.expires %}true{% endif %}'
```
{% endraw %}

## Common Validation Options

### message

It is possible to overwrite the default message with additional fields:

```yaml
customizations:
  expertise:
    validation:
      presence:
        message: record is required.
```

### allow_nil

The `allow_nil` option skips the validation when the value being validated is nil.

### allow_blank

Allows passing an empty string.

### Validation Errors

When form validation is raised, an error message is added to `form_builder.errors` object that contains errors corresponding to fields.

If you need errors for particular field, access them through:

```liquid
{% raw %}
{{ form_object.errors.<field_name> }}
{% endraw %}
```

Example:
```liquid
{% raw %}
{{ form_object.errors.name }}
{% endraw %}
```

### Translation

Each error message can be translated with the platformOS translation mechanism.
The default error messages are:
```yaml
en:
  errors:
    # The default format to use in full error messages.
    format: "%{attribute} %{message}"
    # The values :model, :attribute and :value are always available for interpolation
    # The value :count is available when applicable. Can be used for pluralization.
    messages:
      model_invalid: "Validation failed: %{errors}"
      inclusion: "is not included in the list"
      exclusion: "is reserved"
      invalid: "is invalid"
      confirmation: "doesn't match %{attribute}"
      accepted: "must be accepted"
      empty: "can't be empty"
      blank: "can't be blank"
      present: "must be blank"
      too_long:
        one: "is too long (maximum is 1 character)"
        other: "is too long (maximum is %{count} characters)"
      too_short:
        one: "is too short (minimum is 1 character)"
        other: "is too short (minimum is %{count} characters)"
      wrong_length:
        one: "is the wrong length (should be 1 character)"
        other: "is the wrong length (should be %{count} characters)"
      not_a_number: "is not a number"
      not_an_integer: "must be an integer"
      greater_than: "must be greater than %{count}"
      greater_than_or_equal_to: "must be greater than or equal to %{count}"
      equal_to: "must be equal to %{count}"
      less_than: "must be less than %{count}"
      less_than_or_equal_to: "must be less than or equal to %{count}"
      other_than: "must be other than %{count}"
      odd: "must be odd"
      even: "must be even"
```

{% include 'shared/questions_section' %}
