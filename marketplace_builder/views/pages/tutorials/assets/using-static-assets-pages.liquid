---
converter: markdown
metadata:
  title: Using Static Assets on Your Pages
  description: This guide will help you use static assets (e.g. CSS, Javascript, or HTML files) on your pages.
slug: tutorials/assets/using-static-assets-pages
searchable: true
---

This guide will help you use static assets (e.g. CSS, Javascript, or HTML files) on your pages.

## Requirements

To follow the steps in this tutorial, you should be familiar with the required directory structure for your code base, and understand the concepts of pages, layouts, and assets. You'll extend code samples from the previous tutorials.

* [Required Directory Structure](/how-platformos-works/platformos-workflow)
* [Pages](/tutorials/pages/pages)
* [Layouts](/tutorials/pages/layouts)
* [Assets](/tutorials/assets/assets)
* [Reusing Code Across Multiple Pages](/tutorials/pages/reusing-code-across-multiple-pages) (previous tutorial)

## Steps

{% include 'alert/note', content: 'Below steps are using Liquid filters, to learn about Liquid filters click <a href="/api-reference/liquid-filters">here</a>.' %}

Using static assets on your pages is a four-step process:

1.  Create assets directory and subdirectories
2.  Create assets
3.  Check assets
4.  Access assets

### Step 1: Create assets directory and subdirectories

If you are starting from scratch (without having created the required directory structure), create an `assets` directory inside `marketplace_builder`.

If you have already installed the required directory structure, you can skip this step, and just locate your `marketplace_builder/assets` directory.

Create subdirectories for different assets inside the `assets` directory: for this tutorial, create `scripts` for storing Javascript files, and `styles` for storing CSS files.

### Step 2: Create assets

Create a couple of assets.

Create a CSS file `app.css` in the `styles` directory:

```css
body {
  background-color: #ccc;
}
```

Create a Javascript file `app.js` in the `scripts` directory:

```javascript
console.log("Hello from JS!");
```

Create an HTML file `test.html` in the `assets` directory:

```html
Hello from test.html
```

### Step 3: Check assets

Use {% raw %}`{{ asset_url }}`{% endraw %} variable to check your assets. This will list the full URL of your assets on our content delivery network, including the time of the latest update (used for caching).

Example for this documentation site:

```liquid
{{ asset_url | json }}
```


### Step 4: Access assets

To access assets, use the `asset_url` filter in your liquid file, e.g. layout:


```html
{% raw %}
<html>
  <head>
    <link rel="stylesheet" href="{{ 'styles/app.css' | asset_url }}">
    <script src="{{ 'scripts/app.js' | asset_url }}"></script>
  </head>
  <body>
    <a href="{{ 'test.html' | asset_url }}">Test</a>
    {{ content_for_layout }}
  </body>
</html>
{% endraw %}
```

Sync or deploy. You should see that the background color of the page has changed to the color specified in the `app.css` file, and the link to `test.html` works. If you check the developer console, you can see that the Javascript is there.

{% include 'alert/note', content: 'If you are syncing, you are only adding and changing files, and they will stay in the database even if you delete them on your computer as long as you do not do a deploy' %}

## Next steps

Congratulations! You have learned how to use static assets on your pages. Now you can learn about adding visuals to your pages using CSS, Liquid, or Javascript.

* [Adding Visuals to Your Pages: CSS](/tutorials/assets/adding-visuals-pages-css)
* [Adding Visuals to Your Pages: Liquid](/tutorials/assets/adding-visuals-pages-liquid)
* [Adding Visuals to Your Pages: Javascript](/tutorials/assets/adding-visuals-pages-javascript)

{% include 'shared/questions_section' %}
