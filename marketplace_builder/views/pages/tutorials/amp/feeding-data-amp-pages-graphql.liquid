---
converter: markdown
metadata:
  title: Feeding Data into AMP Pages with GraphQL
  description: This guide will help you feed data into your AMP pages using GraphQL.
slug: tutorials/amp/feeding-data-amp-pages-graphql
searchable: true
---

This guide will help you feed data into your AMP pages using GraphQL. The guide explains the process through a real-life example of displaying products of an online store.

## Requirements
This is an advanced tutorial. To follow it, you should be familiar with basic PlatformOS concepts, technologies, and the topics in the Get Started section, especially pages. You should also know what AMP pages are and how to create them.

* [How PlatformOS Works](/how-platformos-works)
* [Get Started: Pages](/tutorials/pages/pages)
* [Using a Static AMP Template](/tutorials/amp/using-static-amp-template)
* [Converting AMP HTML Pages to Layouts and Pages](/tutorials/amp/converting-amp-html-layouts-pages)

## Steps
Feeding data into AMP pages with GraphQL, in this case, displaying products on a page is a four-step process:

1. Display list of products
2. Create JSON endpoint
3. Fetch listing data
4. Display product details

### Step 1: Display list of products

Create the main page, HTML extended with AMP tags and objects `marketplace_builder/views/pages/product-list.liquid`:

```yaml
---
slug: product-list
layout_name: application
---
```
```liquid
{% raw %}
{% content_for 'amp-dependencies' %}
  <script custom-element="amp-list" src="https://cdn.ampproject.org/v0/amp-list-0.1.js" async></script>
  <script custom-element="amp-bind" src="https://cdn.ampproject.org/v0/amp-bind-0.1.js" async></script>
  <script custom-template="amp-mustache" src="https://cdn.ampproject.org/v0/amp-mustache-0.1.js" async></script>
{% endcontent_for %}
{% endraw %}
[...]
<amp-list src="api/products.json" layout="responsive">
  <template type="amp-mustache">
    <a href="/product-details{{ "/{% raw" }} %}{% raw %}{{ slug }}{% endraw %}{{ "{% endraw" }} %}">
      <div>
        <amp-img src="{{ "{% raw" }} %}{% raw %}{{ image }}{% endraw %}{{ "{% endraw" }} %}" width="300" layout="responsive" noloading></amp-img>
        <h2>{{ "{% raw" }} %}{% raw %}{{ name }}{% endraw %}{{ "{% endraw" }} %}</h2>
        {{ "{% raw" }} %}{% raw %}{{ description }}{% endraw %}{{ "{% endraw" }} %}
      </div>
      <div>{{ "${% raw" }} %}{% raw %}{{ price }}{% endraw %}{{ "{% endraw" }} %}</div>
    </a>
  </template>
</amp-list>
```

Include the AMP dependencies in the layout file `marketplace_builder/views/layouts/application.liquid`:

```liquid
{% raw %}
{% yield 'amp-dependencies' %}
{% endraw %}
```

#### Notes:
* The data source for `<amp-list>` is `products.json`.
* `amp-mustache` enables the 'mustache' (double curly braces) templating syntax.
* The `{{ "{% raw" }} %}` tag instructs the liquid preprocessor not to interpret the liquid tags, and leaves them to AMP/mustache to process.


### Step 2: Create JSON endpoint
Create the JSON endpoint, a dynamically generated JSON document from which AMP fetches the data that it displays `marketplace_builder/views/pages/api/products.json.liquid`:

```yaml
---
slug: api/products
format: json
---
```
```liquid
{% raw %}
{% query_graph 'get_listings', result_name: g %}
{% assign results = g.listings.results %}

{
  "items": [
    {% for listing in results %}
      {
        "name": {{ listing.name | json }},
        "slug": {{ listing.slug | json }},
        "description": {{ listing.description | json }},
        "image": {{ listing.photos[0].url | json }},
        "price": {{ listing.price }}
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]
}
{% endraw %}
```

#### Notes:

* The GraphQL query is not given any argument, thus it retrieves all the listings (products) which are then sorted by price in ascending order with the `sort:` liquid filter.
* Then the `for` loop populates the `"items"` list with JSON data that contains the info for each product.
* The loop puts a comma after each element except for the last in the list.

### Step 3: Fetch listing data
Create the GraphQL query that fetches listing data `marketplace_builder/graph_queries/get_listings.graphql`:

```graphql
query get_listings($slug: String) {
  listings(
    listing: {
      is_deleted: false
      slug: $slug
    }
  ) {
    total_entries
    results {
      name
      slug
      description
      photos { url }
      price: property(name: "price")
    }
  }
}
```

#### Notes:
* If the optional slug argument is omitted, then it returns all listings.
* `price` is a custom attribute defined in the Transactable Type's .yml file, which is found in the `transactable_types` directory:

```yaml
[...]
custom_attributes:
- name: price
  attribute_type: float
```

### Step 3: Display product details
Create the `/product-details` page that loads when visitors click on a product from `/product-list` above `views/pages/product-details.liquid`:

```yaml
---
slug: product-details
layout_name: application
---
```
```liquid
{% raw %}
{% query_graph 'get_listings', result_name: g, slug: params.slug2 %}
{% assign product = g.listings.results.first %}

<h1>{{ product.name }}</h1>
<amp-img src="{{ product.photos[0].url }}" layout="responsive"></amp-img>
<p>${{ product.price }}</p>
<p>{{ product.description }}</p>
{% endraw %}
```

#### Notes:

* The page at `/product-list` passes the listing (product) slug to this page through the URL, which is formed as `/product-details/<listing_slug>`
* Then we pass on the listing's slug to the GraphQL query (`slug: params.slug2`), to find the product details.
* This is the same GraphQL query that you used in the other page to retrieve all listings, but this time you call it with the listing slug to find just one listing.

{% include 'shared/questions_section' %}
