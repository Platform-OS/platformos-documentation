---
converter: markdown
metadata:
  title: Parsing an API Response
  description: This guide will help you parse an API response. In this example, you will store part of the response in a Custom Attribute for later reference using GraphQL mutations.
slug: tutorials/notifications/parsing-api-response
searchable: true
---

This guide will help you parse an API response.

In this example, you will store part of the response in a Custom Attribute for later reference using GraphQL mutations in `callback`, since you are able to access response body via `response.body`.

The tutorial assumes the API returns JSON like:

```json
{
  "third_party_api_id": "id-1"
}
```

and you want store the `third_party_api_id` value (which is `id-1`).

## Requirements
To follow the steps in this tutorial, you should understand the concept of users and Custom Attributes. You'll use the user profile and API call notification created in previous tutorials.

* [Users](/tutorials/users/users)
* [Custom Attributes](/reference/custom-attributes)
* [Creating a User Profile](/tutorials/users/creating-user-profile) (previous tutorial)
* [Creating an API Call Notification](/tutorials/notifications/creating-api-call-notification) (previous tutorial)

## Steps

Parsing an API response is a four-step process:

1. Create Custom Attribute
2. Add GraphQL mutation
3. Create Form Configuration
4. Extend API call notification with callback

### Step 1: Create Custom Attribute

As a first step, create a Custom Attribute in the user profile. In this example, you will use `default_profile`.

### Step 2: Add GraphQL mutation
Add GraphQL mutation:

#### graph_queries/store_third_party_api_id.graphql

```graphql
mutation store_third_party_api_id($user_id: ID!, $third_party_api_id: String!) {
  user_update(
    id: $user_id
    user: {
      profiles: [
        { name: "default", values: { properties: [{ name: "third_party_api_id", value: $third_party_api_id }] } }
      ]
    }
    form_configuration_name: "callback_third_party_api_id"
  ) {
    id
  }
}
```

### Step 3: Create Form Configuration
The mutation you created provides input for the Form Configuration called `callback_third_party_api_id`, so create this Form Configuration:

#### form_configurations/callback_third_party_api_id.liquid

```yaml
---
name: callback_third_party_api_id
resource: User
configuration:
  profiles:
    default:
      properties:
        third_party_api_id:
---
```

### Step 4: Extend API call notification with callback
Extend the API call notification by adding the proper callback, which executes the mutation with the input received form the third party API:

#### notifications/api_call_notifications/ping_example_com_on_user_sign_up.liquid

```liquid
{% raw %}
---
name: ping_example_com_on_user_sign_up
to: 'https://example.com/endpoint/{{ form.id }}'
callback: "{%- assign response_json = response.body | to_hash -%}{% execute_query 'persist_custom_attribute', id: form.id, third_party_api_id: response_json.third_party_api_id %}"
---
{% endraw %}
```


## Next steps

Congratulations! You know how to parse an API response. Now you can learn about Transactables.

* [Transactables](/tutorials/transactables/transactables)

{% include 'shared/questions_section' %}
