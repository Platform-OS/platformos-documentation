---
converter: markdown
metadata:
  title: Custom Images
  description: Custom Images are used to add one or more images to a Profile, Customization, or Transactable.
slug: tutorials/custom-attributes/custom-images
searchable: true
---

**Custom Images** are used to add one or more images to a Profile, Customization, or Transactable.

## Defining

You can enable CustomImages by adding a CustomAttribute with `attribute_type` set to `photo`, for example:

```yaml
- name: avatar
  attribute_type: photo
```

## Version defaults

Each custom image upon creation is saved in three versions.

The defaults are:

| Size   | Width (px) | Height (px) |
| ------ | ---------- | ----------- |
| mini   | 56         | 56          |
| thumb  | 144        | 109         |
| normal | 1280       | 960         |

You can alter the width and height of each version with `versions_configuration`:

```yaml
- name: avatar
  attribute_type: photo
  versions_configuration:
    normal:
      width: 300
      height: 300
```

## Form configuration

Custom Image attribute must be defined in a form to whitelist and validate the form request.

```yaml
...
  custom_images:
    avatar:
      image:
        validation: {
          file_content_type: { allow: ['image/jpeg', 'image/png', 'image/gif'] }
        }
...
```

## Fields

Each image supports the following self-descriptive fields:

| Field name | Type   | Note                                                                 |
| ---------- | ------ | -------------------------------------------------------------------- |
| image      | String | Image that has been sent via form - usually original input from user |

## Displaying, updating

After setting up images as described above, you can further customize image editing in the markup for the forms:


```liquid
{% raw %}
{% if form_builder.fields.profiles.seller.custom_images.avatar.image.value %}
  <div class="preview">
    <figure>
      <a href="{{ form_builder.fields.profiles.seller.custom_images.avatar.image.value }}">
        <img src="{{ form_builder.fields.profiles.seller.custom_images.avatar.image.value }}">
      </a>
    </figure>
  </div>
{% endif %}

<div>
  <label>
    <span>Select a new image...</span>
    <span>or drag photo here to upload</span>
    <input accept="image/gif, image/jpeg, image/jpg, image/png" name="{{ form_builder.fields.profiles.seller.custom_images.avatar.image.name }}" type="file">
  </label>

  {% if form_builder.errors['profiles.seller.custom_images.avatar.image'] %}
    <p>{{ form_builder.errors['profiles.seller.custom_images.avatar.image'] }}</p>
  {% endif %}
</div>
{% endraw %}
```


The example above shows the predefined image tag.

## Using GraphQL to query for `CustomImage`

```graphql
query test_image_query {
  customizations {
    results {
      avatar: custom_image(name: "avatar") {
        normal: url(version: "normal")
        thumb: url(version: "thumb")
        transformed: url(version: "transformed")
      }
    }
  }
}
```
