---
converter: markdown
metadata:
  title: PlatformOS Components
  description: Learn more about the components that help you create, update, and build your site, and the required directory structure of your PlatformOS codebase.
slug: how-platformos-works/platformos-workflow
searchable: true
---

The PlatformOS package consists of three components that help you create, update, and build your site:

* **Partner Portal**: The Partner Portal is an online interface where our Partners can create, manage, and configure sites built with PlatformOS, and manage other users of the Partner Portal. The site created on the Partner Portal will be the site you deploy and sync your changes to during development.

  * The sites created are called **Instances**. Instances have a URL, and they represent different development environments, like staging or production.
  * Users of the Partner Portal are called **Partners**. Partners have the permissions to create, manage, and configure Instances. Partners can also create and manage other Partners.

* **Marketplace Kit**: The Marketplace Kit is a command line interface that helps you deploy configuration files and assets to your PlatformOS site.

* **Your code base**: Your files organized into the required directory structure.

## Components in action

The workflow of developing a site using PlatformOS starts with a Partner creating a new Instance through the Partner Portal. Besides creating a new Instance, the Partner has the options to update and configure existing Instances, or copy and modify the configuration of one Instance to create another with the same or similar configuration. The PlatformOS engine saves the Instance, which &ndash; after authorization &ndash; becomes available for developers to deploy and sync to.

Developers usually start with creating the required directory structure in a local environment. This becomes the framework for the codebase of the Instance.

The Marketplace Kit deploys and syncs the codebase to the Instance.

[TO BE ADDED: diagram1: processes between PlatformOS components]

## Required directory structure

In order to correctly communicate with the PlatformOS engine and API, your code base should be organized into a specific directory structure. The root directory of your project should contain the `marketplace_builder` directory. All directories other than the `marketplace_builder` will be ignored by the Marketplace Kit when deploying and syncing, so you can keep all your JS and CSS files outside of the `marketplace_builder` directory, and use any pre-processors you want to automatically generate the end result files in a proper path inside `marketplace_builder`.

### Recommended directories and files inside the marketplace_builder directory

| Directory/file           | Explanation                                                                                                                                                                                                                      | Learn more                           |
| ------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |
| .marketplace-kit       | Configuration file that specifies available endpoints. Usually, you want to have two endpoints &ndash; staging and production.                                                                                                           | Environments                         |
| assets                 | Directory for static assets, like CSS, JS, images, etc.                                                                                                                                                                          | Assets                               |
| authorization_policies | Directory for liquid files that contains Authorization Policy configuration files. Authorization Policies define rules that control whether a user has access to a form or page.                                                 | Authorization Policies               |
| custom_model_types     | Directory for yml files that define Custom Model Types. Custom Model Types allow you to create persistence containers for your custom forms.                                                                                     | Custom Model Types                   |
| form_configurations    | Directory for liquid files that define Form Configurations. Each of the liquid files should include configuration (including associated Authorization Policies, Notifications, etc.), along with liquid code which renders HTML. | Form Configurations                  |
| graph_queries          | Directory for .graphql files, each defining one GraphQL Query.                                                                                                                                                                   | GraphQL                              |
| notifications          | Directory for files that define Notifications, which then can be associated with Form Configuration.                                                                                                                             | Notifications                        |
| views/pages            | Directory for files that define pages.                                                                                                                                                                                           | Pages                                |
| views/layouts          | Directory for layouts                                                                                                                                                                                                            | Layout                               |
| views/partials         | Directory for partials  &ndash;  reusable snippets of Liquid code usually used to render HTML.                                                                                                                                           | Partial                              |
| transactable_types     | Directory for files that define Transactable Types.                                                                                                                                                                              | Transactables <br>Transactable Types |
| translations           | Directory for yml files of Translations for multilingual sites, also used to define date format, or flash messages.                                                                                                              | Translations                         |
| user_profile_types     | Directory for yml files that define User Profiles. Each instance includes one user role, called ‘default’, so each instance needs to include the default.yml file inside this directory.                                         | User Profiles                        |
