---
converter: markdown
metadata:
  title: Deprecation Policy
  description: This deprecation policy describes how platformOS deprecates features and functionalities in the platformOS core and modules created and maintained by platformOS.
  feedback: true
  skip_contribute_button: true
  questions: true
---

This deprecation policy describes how platformOS deprecates features and functionalities in the platformOS core and modules created and maintained by platformOS. Modules created and maintained by other organizations or individuals may have different rules for deprecation.

## Elegant deprecation
We do elegant deprecation, which means that we donâ€™t force changes for deprecated features.

Everything in platformOS is backwards compatible, so the old ways will still continue to work. Although using deprecated features will not break your code, upgrading is recommended as soon as possible for code quality and performance improvements.

When we deprecate a feature, we:

1. Warn you of an upcoming deprecation through messages in the pos-cli and release notes.
2. Include deprecation messages in the pos-cli audit command which is automatically triggered during deploy. We always suggest the new, improved approach, and ask you to upgrade. Deprecation messages are removed as soon as you upgrade your code.
3. Notify you of deprecations in our corresponding release note where we also recommend what to use instead of the deprecated feature.
4. Update our documentation to mark topics about deprecated features.

Previously, we have removed topics about deprecated features from our documentation, but based on your feedback, are now marking them with a warning that includes a statement that the feature has been deprecated, and recommendations for what feature to use instead.
