---
converter: markdown
metadata:
  title: Liquid Markup - Introduction
  description: Introduction to Liquid Markup
  toc: true
---

Liquid, also known as Liquid markup, is a template language employed within platformOS for crafting dynamic pages and facilitating dynamic configurations, such as adjustments based on the currently logged-in user. Many renowned companies and software, including [Microsoft](https://learn.microsoft.com/en-us/power-pages/configure/liquid/liquid-overview), [Shopify](https://shopify.dev/docs/api/liquid), [Zendesk](https://support.zendesk.com/hc/en-us/articles/4408883291290-Understanding-Liquid-markup-and-Zendesk-Support), [Jekyll](https://jekyllrb.com/docs/liquid/), and [many others](https://github.com/Shopify/liquid/wiki#who-uses-liquid), utilize Liquid in their applications. Use Liquid to establish authorization policies, or to define notifications through email, SMS, or API calls. To further streamline your experience, we've incorporated a wide array of filters and tags. 

{% include 'alert/note', content: 'Liquid has a new syntax â€” visit the [documentation of the liquid tag](https://documentation.platformos.com/api-reference/liquid/theme#liquid) for an example. We are updating all of our Liquid code examples to reflect this change. ' %}

## Output

Output markup (which may resolve to text) is surrounded by

```liquid
{% raw %}
{{ matched pairs of curly brackets (ie, braces) }}
{% endraw %}
```

#### Example

```liquid
{% raw %}
{{ user.name }} => John
{% endraw %}
```

## Tags

Tag markup (which cannot resolve to text) is surrounded by

```liquid
{% raw %}
{% matched pairs of curly brackets and percent signs %}
{% endraw %}
```

#### Example

```liquid
{% raw %}
{% if user %}
  true
{% endif %}
{% endraw %}
```

## Filters

Liquid filters are simple methods that modify the output of numbers, strings, variables, and objects.

### Simple use case

```liquid
{% raw %}
{{ "honda crx" | upcase }} => HONDA CRX
{% endraw %}
```

### Arguments

Some filters accept arguments, for example, the `replace` filter accepts two:

```liquid
{% raw %}
{{ 'Hello liquid' | replace: 'liquid', 'world!' }} => Hello world!
{% endraw %}
```

### Chaining

Having a verbose version of code that will:

1. Create string with words
2. Prepend "Zero," in front of the string
3. Append ",Five" string at the end
4. Split it by comma to create an array of strings
5. Print it to the source

```liquid
{% raw %}
{% assign numbers = 'One,Two,Three,Four' %}
{% assign numbersWithZero = 'One,Two,Three,Four' | prepend: 'Zero,' %}
{% assign all_numbers = numbersWithZero | append: ',Five' %}
{% assign all_numbers_array = all_numbers | split: ',' %}
{{ all_numbers_array }} => ZeroOneTwoThreeFourFive
{% endraw %}
```

You can achieve the same result in much shorter form by chaining the filters one after another:

```liquid
{% raw %}
{{ 'One,Two,Three,Four' | prepend: 'Zero,' | append: ',Five' | split: ',' }} => ZeroOneTwoThreeFourFive
{% endraw %}
```

## Raw

If you want to use liquid text on your page but without executing it, use `{{ 'eyUgcmF3ICV9IC4uLiB7JSBlbmRyYXcgJX0=' | base64_decode }}` syntax.

{% comment %} Dont ask... ^ ;) {% endcomment %}

## Comment

Allows you to leave un-rendered code inside a Liquid template. Any text within the opening and closing comment blocks will not be output, and any Liquid code within will not be executed.

#### Input

```liquid
{% raw %}
Anything you put between {% comment %} and {% endcomment %} tags
is turned into a comment.
{% endraw %}
```

#### Output

```liquid
Anything you put between  tags
is turned into a comment.
```

You can also use `comment` inside the `liquid` tag:

```liquid
{% raw %}
{% liquid
  comment
    This is is my code comment
  endcomment
  echo 'This is not a comment'
%}
{% endraw %}
```
