---
converter: markdown
metadata:
  title: Liquid - Data Sanitization
---

When you display data, from user input or from external sources, it is important to sanitize output before displaying it on a website to avoid [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks.
In Liquid on platformOS, we escape every variable output when you use {% raw %}`{{  }}` and `{%  %}`{% endraw %} markups.

### Input
```liquid
{% raw %}
{% assign user_name = '<a href="https://www.platformos.com">Click Me</a>' %}

<h2>{{ user_name }}</h2>
{% endraw %}
```

### Output (not processed by browser)
```liquid
{% assign user_name = '<a href="http://platformos.com">Click Me</a><h1>x</h1>' %}

<h2>{{ user_name | raw_escape_string }}</h2>
````

In this case, HTML tags are not processed by the browser, so the link is not a clickable link.

## Disable variable sanitization

In situations when you want to display content as it is, you can use [html_safe](/api-reference/liquid/platformos-filters#html_safe) to specify that this variable can be printed without sanitization.

This is especially important when you try to construct a JSON output.

### Input
```liquid
{% raw %}
{% assign color = 'red' %}
{% assign link = '<a href="/car">cars</a>' %}
{
  "color": {{ color | json }},
  "link": {{ link | json | html_safe }}
}
{% endraw %}
```

### Output
```liquid
{% assign color = 'red' %}
{% assign link = '<a href="/car">cars</a>' %}
{
  "color": {{ color | json }},
  "link": {{ link | json }}
}
```

## Escape variables before passing them to external systems

You can also run HTML/JavaScript santization on variables before passing them to tags/filters:

- [escape_javascript](/api-reference/liquid/platformos-filters#escape_javascript)
- [raw_escape_string](/api-reference/liquid/platformos-filters#raw_escape_string)
- [sanitize](/api-reference/liquid/platformos-filters#sanitize)
