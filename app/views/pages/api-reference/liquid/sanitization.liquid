---
converter: markdown
metadata:
  title: Liquid - Data Sanitization
  description: How to data is sanitized by default in Liquid
---

{% include 'alert/important', content: 'Ensure the `escape_output_instead_of_sanitize` flag is set to `true` in <a href="/developer-guide/platformos-workflow/directory-structure/config">app/config.yml</a> - this is the default setting for all new instances' %}

When you display data, from user input or from external sources, it is important to sanitize output before displaying it on a website to avoid [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks.
In Liquid on platformOS, we escape every variable output when you use {% raw %}`{{  }}` and `{% echo %}` tag.{% endraw %} markups.

### Input
```liquid
{% raw %}
{% assign user_name = '<a href="https://www.platformos.com">Click Me</a>' %}

<h2>{{ user_name }}</h2>
{% endraw %}
```

### Output (not processed by browser)
```liquid
{% assign user_name = '<a href="http://platformos.com">Click Me</a><h1>x</h1>' %}

<h2>{{ user_name }}</h2>
````

In this case, HTML tags are not processed by the browser, so the link is not a clickable link.

## Disable variable sanitization

In situations when you want to display content as it is, you can use:

### [html_safe](/api-reference/liquid/platformos-filters#html_safe) filter to mark variable as safe and bypass sanitization.

### Input
```liquid
{% raw %}
{% assign link = '<a href="/car">cars</a>' %}
{{ link | html_safe }}
{% endraw %}
```

The above code will generate a clickable link.

### [print](/api-reference/liquid/platformos-filters#html_safe) tag to skip sanitizing.

The previous method marks the whole variable as safe to be printed, but it might not be the case - for example, you might want to store in a variable safe and unsafe part at the same time. In this scenario, the `print` tag will work as expected:

### Input
```liquid
{% raw %}
{% liquid
  assign invokable_script = "<script>alert('I will be executed')</script>"
  assign malicious_script = "<script>alert('I should be escaped')</script>"
%}
{% capture result %}
  {{ malicious_script }}{{ invokable_script | html_safe }}
{% endcapture %}
{% print result %}
{% endraw %}
```

The "I will be executed" alert will appear on page load, but "I should be escaped" will not be evaluated and will be rendered inline.

## Escape variables before passing them to external systems

You can also run HTML/JavaScript sanitization on variables before passing them to tags/filters:

- [escape_javascript](/api-reference/liquid/platformos-filters#escape_javascript)
- [raw_escape_string](/api-reference/liquid/platformos-filters#raw_escape_string)
- [sanitize](/api-reference/liquid/platformos-filters#sanitize)
