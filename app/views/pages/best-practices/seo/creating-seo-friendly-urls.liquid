---
converter: markdown
metadata:
  title: Creating SEO Friendly URLs
  description: This guide will help you create SEO friendly URLs by walking you through an example.
---

This guide will help you create SEO friendly URLs. The example shows category listings grouped by country, e.g.:

* **/catalogue/Australia/Sydney**
* **/catalogue/Spain/Seville**

## Requirements
This is an advanced tutorial. To follow it, you should be familiar with basic platformOS concepts, HTML, GraphQL queries, Liquid, and the topics in the Get Started section, especially topics related to Pages.

* [platformOS Workflow](/developer-guide/platformos-workflow/development-workflow)
* [Pages](/developer-guide/pages/pages)

## Steps

Creating SEO friendly category listings is a three-step process:

<div data-autosteps></div>

### Step 1: Setup page

* Create Search Page with slug `catalogue`

* Define URL template in page:


```liquid
{% raw %}
{% assign url_template = '/catalogue/{country}/{city}' %}
{% endraw %}
```

* Decode current_url into params with Liquid filter `extract_url_params`:


```liquid
{% raw %}
{% assign url_params = current_full_path | extract_url_params: url_template %}
{% endraw %}
```

### Step 2: Prepare GraphQL query

Assuming you have the following Model Schema `model_schemas/catalogue_listings.yml` already in place:
```yaml
name: catalogue_listings
properties:
  - name: country
    type: string
  - name: city
    type: string
```

Create a GraphQL query with country and city.
```graphql
query get_catalogue_listings($country: String, $city: String) {
  models(
    per_page: 20,
    filter: {
      name: {
        value: "catalogue_listings"
      }
      properties: [
        {name: "country", value: $country},
        {name: "city", value: $city}
      ]
    }
  ) {
    total_entries
    results {
      id
      name
      city: property(name: "city")
      country: property(name: "country")
    }
  }
}
```

### Step 3: Add GraphQL query to page

Add the GraphQL query you created to your page, and pass extracted params to it:

```liquid
{% raw %}
{% graphql g = 'get_catalogue_listings',
  country: url_params.country,
  city: url_params.city
%}
{% endraw %}
```

## Final Page

```liquid
{% raw %}
{% assign url_template = '/catalogue/{country}/{city}' %}
{% assign url_params = current_full_path | extract_url_params: url_template %}

<div class="results">
  <form action="." method="GET">
    {% graphql g = 'get_catalogue_listings',
      country: url_params.country,
      city: url_params.city
    %}

    <strong>{{ g.models.total_entries }}</strong>
    <ul>
    {% for item in g.models.results %}
      <li>
        {{ item.id }} - {{ item.name }} - {{ item.country }} - {{ item.city }}
      </li>
    {% endfor %}
    </ul>
  </form>
</div>
{% endraw %}
```

## Example URLs

**/catalogue/Australia/Melbourne** - listings from Melbourne, Australia

**/catalogue//Sydney** - listings from Sydney

**/catalogue//** - all listings
