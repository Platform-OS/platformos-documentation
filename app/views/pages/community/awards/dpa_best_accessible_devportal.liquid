---
converter: markdown
metadata:
  title: Best Accessible DevPortal - DevPortal Awards 2022
  description: The platformOS Documentation has won the Best Accessible DevPortal category at the DevPortal Awards 2022.
---

{% include 'awards/dpa2022' %}

<img loading="lazy" src="{{ 'images/awards/2022/dpa_best_accessible_devportal.png' | asset_url }}" alt="Adam Broadway and Diana Lakatos accepting the award at the virtual gala." />

In this article, learn about the DevPortal Awards, this year’s judges, and why we won the **Best Accessible DevPortal** award.

{% include 'awards/dpa2022_intro' %}

## Best Accessible DevPortal

In the Best Accessible DevPortal category, the Judges are looking for developer portals that follow specific guidelines and practices in order to cater to all users, with consideration for disability types and severity of impairment. This category highlights the standards and efforts that result in digital products accessible by the widest range of people.

During the evaluation process, to identify the winner of the Best Accessible DevPortal category, judges asked questions like:

* Is your devportal accessible to all possible users with consideration for disability type and severity of impairment?
* Do commonly used accessibility audits result in a clean bill of health?
* Is the developer portal designed with an eye to how people with special needs can benefit?
* Is there an alternative access that you offer people when something doesn’t work well for them on the devportal?
* How do you tie accessibility with an overall inclusivity in design structure, consistency, terminology, language, gender, communications, and so on?


## Why we won

According to the Jury, they were “pleasantly surprised to see that **the PlatformOS Developer Portal team has taken so much care in the accessibility of their portal: from their wonderful Style Guide to the meticulous care of the contrast level in the images**.”

We deeply care about accessibility. We address accessibility right from the design phase, where we use Figma’s Able accessibility plugin. We follow the rules for foreground and background color contrast, font size, and graphical objects (like icons, form fields, etc.), to ensure that our site conforms with WCAG AAA.

As another foundation for accessibility, we make sure to only use (and correctly use) semantic HTML — this helps assistive technologies (like screen readers) convey information to their users by following the semantic structure. In addition to ensuring a consistent structure, semantic HTML facilitates web browsers applying default accessibility features for specific HTML elements. For example, buttons allow for keyboard accessibility (can be navigated to and clicked using the keyboard).

We regularly test for accessibility with various tools. Recent test results of the platformOS Developer Portal:

* Lighthouse: Accessibility score 100/100
* WAVE web accessibility evaluation tool - no errors
* AChecker (Web Accessibility Checker): WCAG 2.0 (Level AAA) - no known problems

As semantic HTML is essential for accessibility, we make sure not to style text any other way than through Markdown, which is then translated into HTML. We provide ready-to-use templates for all content types that include all non-changeable content and placeholders with explanations for the sections that are to be contributed by users.

The aspects described above provide a solid technical foundation. But to optimize for accessibility, content needs to be curated with accessibility in mind. To help the community in this regard, we provide the following guidelines in our Documentation Style Guide.

**Guidelines for structuring content**

* Using headers for structuring content: The Markdown format we use is translated into semantic HTML to help screen readers navigate through our content. We use headers as described in the style guide and follow the templates provided to ensure consistency. We never skip a header level for styling reasons.
* Improving readability by using concise language, writing short paragraphs, and using lists where possible.
* Using alternative text for images and icons, keeping in mind that screen readers read this text out loud.
* If the image serves a function as part of the documentation, we describe the image in detail. Users receive the same information from the alt text that they would receive when viewing the image.
* Including the data for charts or graphs in the alt text.
* When using screenshots to show what the user has to do, the alt text doesn’t repeat the information already described in text.
* Decorative images don't have alt text — it would only be a distraction.
* When inserting an image, we pay attention to the contrast ratio, image quality, and its size in kilobytes. The smaller the image, the more accessible it is. Many people around the world still have poor internet connectivity.
* Providing information as text when using videos - not everyone can interpret video content efficiently.

**Guidelines for accessible language**

We write so that the language we use is inclusive and global, and reflects our users’ diversity (including, for example, race, gender, ability, location, etc.).

* Definitions for all terminology: We introduce new concepts by starting with a definition, and adding them to the Glossary. We explain acronyms when first used.
* Technical language: We use the most specific word we can to talk about technical concepts and processes. For example, we don't say "take" when we mean "copy", or don't say "put" when we mean "install".
* Gender-neutral pronouns: We don’t use gender-specific, third-person pronouns such as he, she, his, and hers. We use the second person when possible, and "they" when needed.
* Descriptive link text: To help keyboard navigation, we add the information into the link text. For example, instead of writing "learn more" or "click here", we write the topic title.
* Avoiding ableist language: We don't use words that assume an ability the user might not have (for example, "as you can see" implies the user has a capacity for vision). We avoid directional language, for example, "blue button" or "button below the headline".
* Never perpetuating racism, bias, and harm: We replace terms like "blacklist" and "whitelist" with terms like "allowed" or "blocked", or replace "native" with "built-in".
* We avoid metaphors and colloquialisms.

This recognition means a lot to us. We have been continuously educating ourselves and improving the accessibility and inclusiveness of our devportal for years. We will keep advocating for accessibility on all platforms that are available to us, so please follow us if you’re interested in this topic.

<img loading="lazy" src="{{ 'images/awards/2022/DPA22_bestaccessible_quote.png' | asset_url }}" alt="Quote from the Judges" />

{% include 'awards/dpa2022_thankyou' %}
