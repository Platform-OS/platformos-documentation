---
converter: markdown
metadata:
  title: Best DevPortal Beyond REST Platforms - DevPortal Awards 2022
  description: The platformOS Documentation has won the Best DevPortal Beyond REST Platforms category at the DevPortal Awards 2022.
---

{% include 'awards/dpa2022' %}

In this article, learn about the DevPortal Awards, this year’s judges, and why we won the **Best DevPortal Beyond REST Platforms** award.

{% include 'awards/dpa2022_intro' %}

## Best DevPortal Beyond REST Platforms

In this category, Judges are looking for developer portals that can unify interfaces from across a range of technologies, to create a systematic developer experience, and combine cataloging and documentation of individual assets with sense making and storytelling to help developers discover the right affordance for their project.

They ask questions like:

* How coherent is your offering, do you help developers to create a mental model or system map of your interface landscape?
* Do you help developers to find an easier lower maintenance way to implement an experience (e.g. through an SDK or widget you maintain and support), even if they came looking for an API?
* Are you offering libraries or other technical resources outside of OAS files?
* Do you offer asynchronous APIs?
* Do you have non-API interfaces?
* Are you providing interfaces for data collections, AI, or IoT, or for still another type of developer platform?
* Do your SDKs offer a range of options to developers?


## Why we won

The jury appreciated the PlatformOS portal’s offering for **developer flexibility, and the open explanation of the offered 3rd party API integrations**.

GraphQL is a domain-specific language that we have baked into the core of platformOS along with Liquid markup, both of which are open-source frameworks. We have clear documentation for both, not just the open-source documentation that we synchronize with, but additional support and examples that have really helped our ecosystem of developers get up to speed. We facilitate  developers, who wish to learn best practice, to transition from older frameworks to experiencing the power and flexibility of GraphQL, especially when combined with the “APIs-for-Everything” devops-in-box ecosystem offered by platformOS.

**Onboarding**

To date, we have developed [three main onboarding journeys](/try-now) for the three main segments of our target audience.

* **Non-technical users** can go through the 1-click route that takes them through registering on the Partner Portal and then, by clicking through an intuitive and simple setup wizard, have them create a demo site and install the blog module in just minutes.
* **Semi-technical users** can create a sandbox in which they can experiment by cloning a demo site from our GitHub repository.
* **Technical users** can follow a more complex tutorial that walks them through the steps of creating an app on platformOS, such as setting up their development environment, syncing with github, deploying and testing their apps, and more. It explains basic concepts, including giving insights into the main building blocks and the logic behind platformOS, while also giving recommendations on best practice workflows

**Developer Guide**

Our [Developer Guide](/developer-guide) provides detailed descriptions of concepts, step-by-step tutorials, references, and examples for implementing various features on platformOS. It starts with an overview of what platformOS is, and then includes in depth topics covering the recommended development workflow, explaining directories and files in the codebase and how to use our command line tool, and getting developers acquainted with our support. These topics help developers create a mental model of our platform, and lay the foundations for confidently using platformOS.

Topics are grouped by features (e.g. Pages), ordered by difficulty (from beginner to advanced), and are cross-referenced to related subsections and topics. Sections usually start with the description of the concept and related background information, then offer one or more tutorials for beginners, and more complex tutorials for advanced users. This makes sure that developers can find all information related to a feature in one place. All topics include code examples, developer tips, and best practice guides where applicable.

**Best Practices**

In the [Best Practices](/best-practices) section, we collect articles and tutorials from experienced platformOS developers across a wide variety of topics, including code quality, development workflow, performance, testing and QA.

Although topics in this section are primarily aimed at experienced developers who might want to fine-tune various aspects of their process, beginners can also benefit from reading the articles, helping them form a better understanding of the underlying concepts behind platformOS and starting to implement on the PaaS with a best practice approach.

**Use Cases**

[Use cases](/use-cases) describe in detail how we implemented a feature, a module or a web application in platformOS. They describe the problem, the challenges and solutions, and always provide insight into our decision-making process: Why did we decide on one technical approach over another? What factors did we consider? What are the current industry best practices?

Use cases include links to related documentation topics, resources related to the topic (e.g. articles), all assets we used (e.g. templates), example code in our GitHub repository, and live demos.


{% include 'awards/dpa2022_thankyou' %}
