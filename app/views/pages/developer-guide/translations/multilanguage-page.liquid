---
converter: markdown
metadata:
  title: Multi-Language Page
  description: Example usage of translations to create multi-language pages.
---

## Defaults

English is the default language.

If there is a `language` query param in the URL, it will respect its value. For example `/contact?language=de`.

The language can also be set in [`context.session`](/developer-guide/variables/context-variable#context-session).

## Simple usage

To be able to use the `translations` feature, there has to be at least one translation file present.

In this example, we will use the page translation key in two languages to demonstrate the mechanism.

```liquid
{% raw %}
---
slug: multilanguage
---
{{ 'general.greeting' | t }}
{% endraw %}
```

##### app/translations/en.yml

```yaml
en:
  general:
    greeting: Hello, World!
```

##### app/translations/pl.yml

```yaml
pl:
  general:
    greeting: Witaj świecie!
```

Having these two files enables you to use the [`t`](/api-reference/liquid/platformos-filters#t) filter. `t` stands for `translate`, and you can use both.

For example, opening `/multilanguage` will default to English. Opening `/multilanguage?language=pl` will try to use Polish and fall back to English for keys that haven't been found.


#### /multilanguage

```liquid
Hello, World!
```

#### /multilanguage?language=pl

```liquid
Witaj świecie!
```

## Arrays

Inside YAML, it is possible to include any data structure that is usable in JSON, including arrays.

Visit [json2yaml](https://www.json2yaml.com/) to learn how YAML will convert to JSON or vice-versa if you feel more comfortable in JSON.

You can use this feature alongside other filters to store collections in a readable form.

##### app/translations/en.yml

```yaml
en:
  general:
    cars:
      - Ford Mustang
      - Corvette
      - Gran Torino
```

##### app/translations/jp.yml

```yaml
jp:
  general:
    cars:
      - Honda
      - Subaru
      - Lexus
```

#### Example page

```liquid
{% raw %}
{% assign cars = 'general.cars' | t | to_hash %}

<ul>
{% for car in cars %}
<li>{{ car }}</li>
{% endfor %}
</ul>
{% endraw %}
```

#### /multilanguage?language=en

```liquid
<ul>
  <li>Ford Mustang</li>
  <li>Corvette</li>
  <li>Gran Torino</li>
</ul>
```

#### /multilanguage?language=jp

```liquid
<ul>
  <li>Honda</li>
  <li>Subaru</li>
  <li>Lexus</li>
</ul>
```

## Parameterization (variables)

Sometimes you'll need to translate parts of a sentence, but keep others (e.g. names). In these cases, some of the content should be parameterized.

The translate filter accepts named arguments and `%{variable}` syntax is available in translations keys.

##### app/translations/en.yml

```yaml
en:
  personal:
    hello: 'Hello %{name}. Take a look at my website: %{url}'
```

##### app/translations/pl.yml

```yaml
pl:
  personal:
    hello: 'Cześć %{name}. Zerknij na moją stronę www: %{url}'
```

#### Example page

```liquid
{% raw %}
{% assign my_name = context.params.name | default: "Pawel" %}
{% assign url = context.params.url | default: "https://example.com" %}

{{ 'personal.hello' | t: name: my_name, url: url }}
{% endraw %}
```

#### /multilanguage?language=en&name=John&url=https://documentation.platformos.com

```liquid
Hello John. Take a look at my website: https://documentation.platformos.com
```

#### /multilanguage?language=pl&name=Pawel&url=https://platform-os.com

```liquid
Czesc Pawel. Zerknij na moja strone www: https://platform-os.com
```

### Live example and source code

Compilation of all examples above:

* [No language set](https://examples.platform-os.com/multilanguage?name=John)
* [English language](https://examples.platform-os.com/multilanguage?language=en&name=John&url=https://documentation.platformos.com)
* [Polish language](https://examples.platform-os.com/multilanguage?language=pl&name=John&url=https://documentation.platformos.com)
* [Japanese language](https://examples.platform-os.com/multilanguage?language=jp&name=John&url=https://documentation.platformos.com)

[Source code](https://github.com/mdyd-dev/platformos-examples/tree/master/modules/multilanguage/public) can be found on GitHub.
