---
converter: markdown
metadata:
  title: Installing a Module
  description: This guide will help you install a module from the Module Marketplace using pos-cli.
---

This guide will help you install a module from the Module Marketplace using the [pos-cli](/developer-guide/pos-cli/pos-cli). It is also possible to [Install Module using Partner Portal Module Marketplace UI](/developer-guide/partner-portal/modules/installing-module).

## Module Installation using `pos-cli`

To install a module, go to the root directory of your project and type `pos-cli modules install <module name>`, for example to install the [core module](/developer-guide/modules/pos-modules/core) use the following command:

`pos-cli modules install core`

You can find list of available modules in [Partner Portal Module Marketplace](https://partners.platformos.com/marketplace/pos_modules). You can also read more about [official platformOS Modules](https://documentation.staging.oregon.platform-os.com/developer-guide/modules/platformos-modules) that have been developed by platformOS Employees to help develop new application on platformOS without worrying about the basics.

After successful installation of a module, you will see notification similar to this:

### installing a specific version of a module

If you would like to install a specific module version, you can use similar syntax as in `npm` - adding `@` followed by the desired version number, for example to install the core module in version 1.5.1:

`pos-cli modules install core@1.5.1`

```
✔ Added module: core@1.5.3 to app/pos-modules.json
✔ Modules lock file updated: app/pos-modules.lock.json
```

We will explain those two files in a next sections.

## pos-modules.json and app/pos-modules.lock.json

platformOS keeps tracks of the modules that should be installed using `pos-modules.json` files. When you use `pos-cli modules install` command, we will automatically add entry to `pos-modules.json` file with the current version. It is equivalent to npm's `package.json` file. You can modify this file manually as well. We recommend that all modules follow [semantic versioning]()

You can use both `~` and `^` before a module version.

`~` will increment the `patch` version, for example `~1.2.3` will use releases from 1.2.3 to &lt; 1.3.0.

`^` will increment both `patch` and `minor` version, for example `^1.2.3` will use releases from 1.2.3 to &lt; 2.0.0.

Example pos-modules.json file can look like this:

```json
{
  "modules": {
    "core": "^1.5.0",
    "user": "^2.0.0"
  }
}

```

The `pos-modules.lock.json` is equivalent to `package-lock.json` and should not be manually modified. It will be automatically generated and will lock compatible modulue versions, respecting their defined dependencies. Its purpose is to ensure that any module will not be accidentally/automatically upgraded without explicit action.

## Downloading module source code

The pos-cli modules install command only adds entry to the pos-module files. When you deploy your application, the lock file is included in the release. If there are any changes required (for example, you've added a new module or you've changed a version of existing module), we will download the source code of a module (including private folder).

However, most of the times you would like to download the source code anyway - to avoid [platformos-check](/developer-guide/platformos-check/platformos-check) errors/warnings about missing files, to browse the source code etc. You download the source code using `pos-cli modules download` command, for example to download source code of the core module, you can use:

`pos-cli modules download core`

The zip archive with the source code will be automatically downloaded and unzipped in `modules/<module name>`. Please note that it will not include any file from the `private` directory though.)

You should never modify any file in the `modules/<module name>` directory - see [Overwritting a module file](#overwritting-a-module-file) to learn about recommended approach to modify a module file.


