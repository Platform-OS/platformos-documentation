---
converter: markdown
metadata:
  title: Modules Introduction
  description: Modules allow code reuse and sharing while protecting the IP of creators.
  toc: true
---

**Modules** allow code reuse and sharing, while optionally protecting the IP of creators by using `private` folder. They can also be used as a namespace, to group various files (graphql, pages, partials etc.) related to a bigger functionality of a project, all in one directory.

## Partner Portal as a Module Registry

Modules can be uploaded to [Modules Marketplace in Partner Portal](https://partners.platformos.com/marketplace/pos_modules) to make the process of installing, downloading and updating them easier. Any module uploaded to Partner Portal will be possible to be installed via `pos-cli modules install` command, and you will be able to download the source code (to browse source code and to leverage [platformos-check](/developer-guide/platformos-check/platformos-check) built-in navigation).

## Directory structure

In your codebase, the convention is that `modules` that are external to the application needs to be at the same level as the `app` directory. Application that uses such a module should never modify any of the files. See [Overwritting a module file](#overwritting-a-module-file) to learn about modifying a module file.

Modules that are internal to the application, i.e. they serve as a namespace, should be put inside `app` directory. We'll focus on the external modules, meaning we'll assume that they are installed via `pos-cli modules install` command, and we'll use `app` only for [Overwritting a module file](#overwritting-a-module-file).

Module code can be split into 2 directories to protect IP (Intellectual Property). To create a module, split module code into `public` and `private` folders, and place all that code into the `modules/MODULE_NAME` directory.

```shell
app
modules
└── MODULE_NAME
    ├── public
    │   └── assets
    └── private
        └─ assets
```

`public` and `private` directories have the same structure as the standard `app` folder, but if developers try to download or preview files after the module has been deployed to an Instance, they will only be able to access the files from the `public` folder.

In general, when referencing files that are part of a module, platformOS uses a prefix that does not include any `public` or `private` folders (for example: `modules/admin/app.css` instead of `modules/admin/private/app.css`). This means that developers should not create files with the same name in both public and private folders, as one will overwrite the other. This behavior gives creators flexibility: if they want to change the scope of the file, they can move it between the private and public folders without changing the code.

You can create an Instance and deploy the code as you would usually do, and you still can have the `app` folder on the top level (this code will not be part of the module but you can use it while developing).

This mechanism allows creators to share their module code, and make it configurable (by code in the `public` folder), but still protect the IP in the `private` folder.

### Example: Module directories

An example of module code split into two directories, inside the `modules` directory:

```shell
app
└── views
   └── pages
       ├── index.liquid
modules
└── admincms
     ├── private
     │   └── graphql
     │       ├── foo.graphql
     │       └── bar.graphql
     └── public
         └── views
              └── pages
                  └── foo.liquid
```

## Overwritting a module file

Although not desired, for real life scenarios, it is sometimes necessary to overwrite a module file. If you would like to overwrite a module file, for example `modules/foo/public/views/pages/bar.liquid`, you can do it by creating a new file with the exact same path and placing it inside the `app` directory:

```shell
app
└── modules
    └── foo
         └── public
             └── views
                  └── pages
                      └── bar.liquid
modules
└── foo
     └── public
         └── views
              └── pages
                  └── bar.liquid
```

On sync/deploy, platformOS will overwrite the file server side, however in your repository you will still have access to both of the files. When upgrading the modules, you will be able to check which files for which you have created an overwrite have changed and compare those.

## Namespacing rules

Configuration files placed in a module are treated a bit differently than regular files.
To avoid conflicts between the code of a module and regular code (or between modules) a namespacing strategy is used.

The general rule of accessing files in modules is to prefix paths with `modules/MODULE_NAME`. Keep in mind that skipping resource type applies just like it does without modules. This means that when you access a `partial`, you type a path to it as if you were in the partials directory.

When you use the app: `app/views/partials/users/settings/name.liquid`
It is accessed by path: `users/settings/name.liquid`

When you use the module: `modules/admin/public/views/partials/users/settings/name.liquid`
It is accessed by path: `modules/admin/users/settings/name.liquid`

The only difference is the prefix.

## Examples

### Assets

You can access assets placed in the `assets` directory in a module using the [asset_url](/api-reference/liquid/platformos-filters#asset_url) filter.

Paths for those files are prefixed with `modules/MODULE_NAME`

##### modules/admin/public/assets/app.css

```html
{% raw %}
<link rel="stylesheet" media="screen" href="{{ 'modules/admin/app.css' | asset_url }}">
{% endraw %}
```

##### modules/admin/public/assets/admin.js

```html
{% raw %}
<script src="{{ 'modules/admin/admin.js' | asset_url }}"></script>
{% endraw %}
```

### Partials

Partials can be referenced with their shorter name - the same as the regular ones.
For example, to include partial saved as `modules/admin/private/views/partials/comments.liquid`, you should use:

```liquid
{% raw %}
{% include 'modules/admin/comments' %}
{% endraw %}
```

### Layouts

Layout name has the same prefix when referenced within a page:

##### modules/admin/public/views/layouts/settings.liquid

```yaml
slug: admin/settings
layout: modules/admin/settings
```

### Records

##### modules/admin/private/records/resume.yml

```graphql
query get_resumes {
  records(
    per_page: 5
    filter: {
      table: { value: "modules/admin/resume" }
    }
  ) {
    results {
      id
    }
  }
}
```

### Authorization Policies

##### modules/admin/public/authorization_policies/can_view_blog_posts.liquid

```liquid
{% raw %}
---
name: can_view_blog_posts
redirect_to: /blog
flash_alert: Please log in to access this page.
---
true
{% endraw %}
```

Within the page/form, it is referenced with a prefix:

```yaml
authorization_policies:
  - modules/admin/can_view_blog_posts
```

##### graphql Query

The query looks like any other query:

##### modules/admin/public/graphql/get_blog_instance.graphql

```graphql
query get_blog_instance(
  $current_user_id: ID
  $slug: String
  $scope: String
) {
  records(
  ...
) {
}
```

But it is referenced with the prefix:

```liquid
{% raw %}
{%- graphql bi = 'modules/admin/get_blog_instance' -%}
{% endraw %}
```

### Translations

[Translations](/developer-guide/translations/translations) YML files for module should be placed in:

##### modules/admin/public/translations/

But when used in the module code they should be prefixed:

```liquid
{% raw %}
{{ 'modules/admin/strings.sample_string' | t }}
{% endraw %}
```

## Related topics

* [Creating a Module](/developer-guide/modules/creating-module)
* [Sharing a Module](/developer-guide/modules/sharing-module)
* [Installing a Module](/developer-guide/partner-portal/modules/installing-module)
