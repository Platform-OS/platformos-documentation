---
converter: markdown
metadata:
  title: Forms
  description: Basic concepts of forms in platformOS with examples.
---

Just like in every web application, **HTML forms** are essential in platformOS. Because using plain HTML forms can get difficult to maintain with complex data structures, we provide multiple tools that make working with forms much easier.

To delve into forms, you should be familiar with:
 * [Liquid Template language](/api-reference/liquid/introduction)
 * platformOS [Pages](/developer-guide/pages/pages)

## Basic concept

Form configuration is defined as Liquid files and is located within the `forms`.

If you develop your code as module `forms` directory should be placed inside `public` or `private` directory of your module.

If your code is not a module, `forms` is placed directly inside `app` directory.

Each file is divided into two sections: configuration and implementation.

* **Configuration section** is placed on top of the file marked with three dashes `---` at the start and end of the section. It is a definition written in [YAML](https://en.wikipedia.org/wiki/YAML) that is telling the platform to create/update the form endpoint with given name and settings. These settings determine where to store and how to validate the data. Head to the [Form Configuration Options](/developer-guide/forms/form-configuration) section for a full list of configuration options.
{% raw %}
* **Implementation section** is an HTML part that accepts Liquid Markup with all goodies from platformOS. This is where you construct the form displayed to users. You can construct the form in HTML but it's much easier to use the `{% form %}` tag that will handle many tasks behind the scenes, and will make it easier to write clean code. Learn more about it in the [Rendering Form Tutorial](/developer-guide/forms/form-rendering).
{% endraw %}


## Minimal form example

Every form configuration is strictly connected with the resource that can be a static class predefined by platformOS or a dynamic model. The very basic example of the Form that enables the possibility to create an object of Model Schema named "Car" and accepts one property called "color", would look like this:

{% raw %}
```liquid
---
name: car_form
resource: car
fields:
  properties:
    color: {}
---

{% form %}
  <input name="{{ form.fields.properties.color.name }}" />
  <button>Save</button>
{% endform %}
```
{% endraw %}

As already mentioned the file is split into two sections. In the configuration part, you define `name` that is later used to include the form in the view, `resource` that tells the platform which Model Schema is connected with that form and `configuration` that whitelists model `properties` that can be altered with this form endpoint.
In the implementation part the [form tag](/api-reference/liquid/platformos-tags#form) generates the HTML `<form>` together with all inputs and properties required for successful form submission. The name of the text input, included in the form body, is provided by the [form variable](/developer-guide/forms/default-payload#form-variable).

To display the form within a page, use the [include_form tag](/api-reference/liquid/platformos-tags#include_form) that accepts the name of the form that you want to display:
{% raw %}

```liquid
---
slug: car
---
{% include_form "modules/minimal_form/car_form" %}
```
{% endraw %}

Now head to the `/car` page and see the form with text input followed by a submit button.


## Live example and source code

To see how it works on a real webpage go to the [live example](https://examples.platform-os.com/car) page.
[Source code](https://github.com/mdyd-dev/marketplace-nearme-example/tree/master/modules/minimal_form) can be found on GitHub.


## Related topics

* [Form](/developer-guide/forms/form-configuration)
* [Form Rendering](/developer-guide/forms/form-rendering)
* [Form Server Side Processing](/developer-guide/forms/form-server-side-processing)
* [Flash Messages](/developer-guide/forms/flash-messages)
* [Default Payload](/developer-guide/forms/default-payload)
* [Validation](/developer-guide/forms/validation)
* [Examples](developer-guide/forms/examples)
