---
converter: markdown
metadata:
  title: GraphQL in platformOS
  description: This guide covers how to use GraphQL in platformOS
---

### GraphQL Overview

GraphQL allows developers to communicate with the platformOS backend. It is used to query and mutate data, offering control over the information returned or modified. In platformOS, this is particularly helpful for tasks such as database management, user authentication, or integrating third-party services like email or SMS. GraphQL provides developers with a powerful alternative to Liquid, enabling highly tailored queries and mutations for a wide range of use cases.

- [What is platformOS — GraphQL](/developer-guide/about-platformos/about-platformos#graphql)
- [Introduction to GraphQL](https://graphql.org/learn)
- [The Fullstack Tutorial for GraphQL](https://www.howtographql.com)

## Setting up your IDE for GraphQL

Before diving into writing GraphQL queries and mutations on platformOS, it's important to set up your development environment correctly. The platformOS workflow includes dedicated steps for configuring your IDE to work with GraphQL. Proper configuration ensures that you can make full use of autocompletion and syntax highlighting, streamlining the development process.

**Learn how to set up your IDE for GraphQL**: [Development Workflow – Setup IDE for GraphQL](/developer-guide/platformos-workflow/development-workflow#5-setup-ide-graphql)

{% include 'alert/tip', content: 'Learn how to <a href="/developer-guide/platformos-workflow/development-workflow#5-setup-ide-graphql">set up your IDE for GraphQL</a>.' %}

## Using GraphQL in platformOS

Once your development environment is set up, you can start using GraphQL for various tasks, including data retrieval, storage, and integration with other services. platformOS allows you to create and run GraphQL queries and mutations, enabling a wide range of functionalities such as:

- **Retrieving data**: You can query platformOS databases using GraphQL, retrieving only the specific data you need.
- **Mutations**: GraphQL is also used to perform mutations—actions that modify data, such as creating, updating, or deleting records.
  
For example, you can use GraphQL to send emails or trigger HTTP requests, and even interact with PostgreSQL databases to create or update records.

- [Retrieving and Presenting Data example tutorial](/developer-guide/pages/retrieving-presenting-data)

### GraphQL Query and Mutation Glossary
To get the most out of GraphQL, it's essential to understand the terms and structures involved in querying and mutating data. The platformOS **GraphQL Glossary** provides definitions for key concepts like fields, arguments, and directives, with specific examples showing how to use them within platformOS.

- [GraphQL Glossary](/developer-guide/glossary#graphql)

### **Key Features and Use Cases**
GraphQL on platformOS enables a wide variety of use cases, such as:

1. **Data retrieval**: Using queries to fetch only the necessary data, improving performance and efficiency.
2. **Data mutation**: Creating, updating, or deleting records in the platformOS database with precision.
3. **Integrations**: Triggering external services (e.g., SendGrid for email, SMS services) using GraphQL mutations.
4. **Handling properties and filtering**: Customizing queries to retrieve or filter specific properties from database records based on flexible criteria.

{% include 'alert/tip', content: 'Learn more about querying and mutating <a href="/api-reference/properties">Properties</a>.' %}

## Getting Started with GraphQL

To begin working with GraphQL on platformOS, follow these steps:
1. **[Set up your IDE](/developer-guide/platformos-workflow/development-workflow#5-setup-ide-graphql)** for GraphQL to enable autocompletion and syntax validation.
2. **Familiarize yourself with the [GraphQL Glossary](/api-reference/graphql/glossary)** to understand the basic terminology.
3. **Start with simple queries** to fetch data, and use mutations for creating or updating records.

## Resources for Learning GraphQL

**Introduction to GraphQL**:  
This is the official introduction to GraphQL, explaining the core concepts and how GraphQL works.  
- [Introduction to GraphQL](https://graphql.org/learn)

**The Fullstack Tutorial for GraphQL**:  
A comprehensive tutorial for learning GraphQL from scratch. It covers both frontend and backend development, with examples in multiple programming languages.  
- [The Fullstack Tutorial for GraphQL](https://www.howtographql.com)

**Set up your IDE for GraphQL**:  
Learn how to configure your IDE for GraphQL, enabling autocompletion, syntax validation, and better development workflow on platformOS.  
- [Set up your IDE for GraphQL](/developer-guide/platformos-workflow/development-workflow#5-setup-ide-graphql)

**GraphQL vs Liquid Directory Structure**:  
Learn the differences between the directory structure for Liquid and GraphQL in platformOS. This guide outlines which directories are necessary for each and provides clarity on how to use them effectively in your projects.  
- [GraphQL vs Liquid Directory Structure](https://alex-docs-preview.staging.oregon.platform-os.com/developer-guide/platformos-workflow/directory-structure/graphql-liquid-directories)

**GraphQL Glossary**:  
This glossary explains core GraphQL terms such as **arguments**, **aliases**, and **directives**. It provides practical examples on how these terms are used within platformOS implementations.  
- [GraphQL Glossary](/api-reference/graphql/glossary)

**Retrieving and Presenting Data**:  
This guide walks you through retrieving data using GraphQL queries and presenting it on a web page via Liquid. It also explains how to test queries using the GraphiQL tool.  
- [Retrieving and Presenting Data](/developer-guide/pages/retrieving-presenting-data)

**Feeding Data into AMP Pages with GraphQL**:  
Learn how to use GraphQL queries to display product data in AMP (Accelerated Mobile Pages), integrating JSON endpoints with AMP structures.  
- [Feeding Data into AMP Pages](/api-reference/graphql/amp-pages)

**Saving Data to the Database**:  
This tutorial shows how to use GraphQL mutations to store and remove data in platformOS databases, and includes steps for creating a GraphQL mutation for inserting records.  
- [Saving Data to the Database](/developer-guide/databases/saving-data)

**Loading Related Records**:  
This guide explains how to load related records efficiently using GraphQL. It addresses common issues like n+1 queries and provides examples of joining records within a single query for better performance.  
- [Loading Related Records](/developer-guide/records/loading-related-records)

**Properties Guide**:  
Covers how to define and retrieve properties in platformOS. It explains how to use GraphQL to query and filter properties based on various data types.  
- [Properties](/api-reference/properties)

**GraphQL vs Liquid Directory Structure**:  
Learn the differences between the directory structure for Liquid and GraphQL in platformOS. This guide outlines which directories are necessary for each and provides clarity on how to use them effectively in your projects.  
- [GraphQL vs Liquid Directory Structure](/developer-guide/platformos-workflow/directory-structure/graphql-liquid-directories)