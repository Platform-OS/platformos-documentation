---
layout_name: application
converter: markdown
metadata:
  title: Manage the database using the pos-cli GUI
  description: This guide will introduce you to the our database management UI, which is a part of the pos-cli tool.
---

This guide introduces our database management tool, which is part of [`pos-cli`](/developer-guide/pos-cli/pos-cli).

The `pos-cli gui serve` command is an efficient way to preview your current database state. It also allows you to modify data easily via the UI. However, it is not recommended for use in a production environment. For modifying production data, consider writing a [migration](/developer-guide/platformos-workflow/codebase#migrations) for a small amount of data or a one-time script that you can invoke in a staging environment first.

## Requirements

Before you begin, make sure you have the `pos-cli` installed and your environment is properly configured.

* [Get Started Guide](/get-started): Helps you gain access to our platform, set up a site, and install pos-cli.
* [Technologies](/developer-guide/about-platformos/about-platformos#technologies): See an overview of the technologies used in platformOS.

## Starting the GUI

To start the Database UI locally, run the `pos-cli gui serve [environment]` command.

For example:

<pre class="command-line" data-output="2-4" data-user="user" data-host="host"><code class="language-bash">
$ pos-cli gui serve staging
[18:05:01] Connected to https://documentation.platformos.com/
[18:05:01] Admin: http://localhost:3333
[18:05:01] ---
[18:05:01] GraphiQL IDE: http://localhost:3333/gui/graphql
[18:05:01] Liquid evaluator: http://localhost:3333/gui/liquid
</code></pre>

{% include "alert/note", content: "Replace `staging` with the environment you're working on. To view all available environments, use `pos-cli env list`." %}

Do not close your terminal or end the command â€” `pos-cli gui serve` must be running in the background for the GUI to work correctly.

To start using the Database UI, open the URL with "database" in it: `http://localhost:3333/database`.

<img loading="lazy" src="{{ 'images/get-started/database-gui.png' | asset_url }}" alt="Screenshot of Database tile on the GUI" />

## UI and Features Overview

Here is an example of how the UI looks for our [e-Commerce Marketplace Solution](/developer-guide/pos-marketplace-template/marketplace-template):

<img loading="lazy" src="{{ 'images/get-started/database-ui.png' | asset_url }}" alt="Screenshot of Database UI" />

The UI allows you to:
* List all existing tables
* Browse data in each table with filtering and sorting support (the UI builds [records GraphQL queries](/api-reference/graphql/data/queries/records) with the proper arguments behind the scenes)
* Edit existing record
* Delete existing record
* Create a new record
* Browse [soft-deleted records](/developer-guide/records/data-backup-removal#automatic-delayed-permanent-removal) and restore them

### Restoring Deleted Records using the Database UI

In the **Database UI**, you can switch between the current database view and deleted records using the icons provided:
- **Current Records**: Represented by the **leaf icon**.
- **Deleted Records**: Represented by the **recycle bin icon**.

<img loading="lazy" src="{{ 'images/get-started/show-deleted-records.png' | asset_url }}" alt="Screenshot of Database UI showing the Show deleted records icon" />

To restore a deleted record:
1. Click the **recycle bin icon** to show soft-deleted records.
2. Locate the record you wish to restore.
3. From the dropdown next to the record, select "Restore record".

<img loading="lazy" src="{{ 'images/get-started/restore-record.png' | asset_url }}" alt="Screenshot of Database UI showing the Restore record option" />

After restoring, the record will be available again in the current database view.