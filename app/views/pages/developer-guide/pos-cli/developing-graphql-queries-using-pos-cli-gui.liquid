---
layout_name: application
converter: markdown
metadata:
  title: Developing GraphQL Queries Using the pos-cli GUI
  description: This guide will introduce you to the GraphiQL IDE for GraphQL that is a part of the pos-cli tool.
---

This guide will introduce you to the GraphiQL IDE (Integrated Development Environment) for GraphQL that is a part of the [`pos-cli`](/developer-guide/pos-cli/pos-cli) tool.

Using the `pos-cli gui serve` command is the best way to develop your GraphQL queries. It communicates with the platformOS environment by running GraphQL queries against it. This allows you to see a live preview of the data from your application.

It communicates with the database directly, eliminating errors caused by data passing through other layers or features of the system.

When debugging an error, you have direct control over the query and receive instant feedback after making changes. This allows you to simplify queries by removing unnecessary elements and adjusting the passed arguments.

## Requirements

To follow the steps in this tutorial, ensure that `pos-cli` is installed and your environment is configured.

* [Get Started Guide](/get-started): Helps you gain access to our platform, set up a site, and install pos-cli.
* [Technologies](/developer-guide/about-platformos/about-platformos#technologies): Overview of the technologies used in platformOS.

## Starting the GUI

To start GraphiQL locally, run the `pos-cli gui serve [environment]` command.

For example:

<pre class="command-line" data-output="2-4" data-user="user" data-host="host"><code class="language-bash">
$ pos-cli gui serve staging
[18:05:01] Connected to https://documentation.platformos.com/
[18:05:01] Admin: http://localhost:3333
[18:05:01] ---
[18:05:01] GraphiQL IDE: http://localhost:3333/gui/graphql
[18:05:01] Liquid evaluator: http://localhost:3333/gui/liquid
</code></pre>

{% include "alert/note", content: "Replace `staging` with the environment name you want to develop on. To list all available environments, use `pos-cli env list`" %}

Do not close your terminal or end the command — `pos-cli gui serve` must be running in the background for GraphiQL to work correctly.

To start using it, go to the link with "graphql" in it: `http://localhost:3333/gui/graphql`.

You will be greeted with the [GraphiQL editor](https://github.com/graphql/graphiql).

Here’s how it looks with an example mutation already written, including query variables, documentation, and the explorer open:

<img loading="lazy" src="{{ 'images/get-started/graphiql.png' | asset_url }}" alt="Screenshot of GraphiQL" />

## UI and features overview

The URL of the environment that GraphiQL is connected to is displayed when opened. This helps you avoid running queries on the wrong environment (for example, accidentally deleting data from production instead of development).

In our documentation, it shows: `platformOS - https://documentation.platformos.com/`.

### Main editor window

The main editor window is where you type queries and mutations to run against the environment. It functions similarly to a code editor, featuring line numbers, code folding, and even [keyboard shortcuts](https://defkey.com/codemirror-shortcuts) familiar from other editors. Although not all shortcuts are listed in the official documentation, here are a few useful ones:

- **CTRL+X** (CMD+X on Mac) – Cut the line when nothing is selected
- **CTRL+J** (CMD+J on Mac) – Join the current line with the next line (removes line break)
- **CTRL+/** (CMD+/ on Mac) – Comment or uncomment line(s)
- **CTRL+]** (CMD+] on Mac) – Indent the line by one level
- **CTRL+[** (CMD+[ on Mac) – Unindent the line by one level

<img loading="lazy" src="{{ 'images/graphiql/main-window.png' | asset_url }}" alt="GraphiQL main editor window" />

When you are ready to run a query, you can either press the "Play button" or use the keyboard shortcut **CTRL+ENTER** (CMD+ENTER on Mac). The results will be displayed on the right side of the window (grayed out).

You can write multiple queries in the editor. When this is the case, pressing the "Play button" will display a dropdown where you can select which query to run.

<img loading="lazy" src="{{ 'images/graphiql/multiple-queries.png' | asset_url }}" alt="Multiple queries" />

To avoid selecting queries manually, you can either remove unused queries or comment them out. In GraphQL, placing a `#` at the beginning of a line makes everything after it a comment.

<img loading="lazy" src="{{ 'images/graphiql/comments.png' | asset_url }}" alt="Comments in GraphQL" />

If you're unsure what you can use at any given moment, press **CTRL+SPACE** to see autocomplete options. This allows you to write queries without needing to keep the documentation open.

<img loading="lazy" src="{{ 'images/graphiql/autocomplete.png' | asset_url }}" alt="Autocomplete in GraphiQL" />

### Default values

When your query or mutation accepts arguments, you can set default values for them. These default values will be used when specific arguments are not passed to the query.

Example of using default argument values:

```graphql
query get_records($name: String = "feedback") {
  records(
    per_page: 10
    filter: {
      table: { value: $name }
    }
  ) {
    results {
      id
    }
  }
}
```

{% include 'alert/note', content: 'Keep in mind that only non-required arguments can have default values. Required ones need to be populated from outside of the query, for example, from query variables.' %}

### Query variables

If you're developing a query that accepts arguments, you can pass them in the bottom section of the editor by clicking on "Query variables" to open it. This is the best way to pass required arguments without changing the original query.

<img loading="lazy" src="{{ 'images/graphiql/variables.png' | asset_url }}" alt="Query variables" />

GraphQL queries accept JSON format, meaning the variables must be an object, and key names must be enclosed in double quotes. Valid JSON types for values include strings, numbers, and booleans.

### Explorer

Click on the "Explorer" button above the main editor window to open the explorer.

The explorer is an interactive query builder that can speed up query creation. It has two main sections: queries and mutations.

You can use checkboxes next to properties to build your query. Set values (or choose if it is an enum type) next to the property name. The query will automatically update in the main editor window.

<img loading="lazy" src="{{ 'images/graphiql/explorer.png' | asset_url }}" alt="Explorer in GraphiQL" />

At the bottom of the explorer, you’ll find a dropdown to add a new query or mutation.

<img loading="lazy" src="{{ 'images/graphiql/explorer-add-new.png' | asset_url }}" alt="Explorer in GraphiQL - Add new query, add new mutation" />

When you use this feature, it will create a new query in the main editor without a name, but with a placeholder property filled in. Don’t be intimidated by `__typename`; explore the endpoint you’re interested in if it’s unfamiliar. If the query isn’t needed, simply delete it from the main editor or comment it out.

### Docs

On the right side, you can explore built-in interactive documentation. This documentation is generated from the GraphQL schema and provides a list of all available endpoints for both queries and mutations:

<img loading="lazy" src="{{ 'images/graphiql/docs.png' | asset_url }}" alt="Documentation" />

- Green values indicate default values for a given argument.
- Values with a `!` denote required arguments.

### History

By clicking on the "History" button, you can access queries that you've previously run across all environments.

Example of the history view:

<img loading="lazy" src="{{ 'images/graphiql/history.png' | asset_url }}" alt="Screenshot of History listing previous queries" />

Named queries are displayed by their names, while unnamed ones display the beginning of the code.

### Prettify

If you'd like to apply default code formatting provided by GraphiQL, click on the "Prettify" button at the top. While it’s not the most advanced formatting tool, it's useful for quick prototyping.

Once you're done with your query and have copied it to your `.graphql` file, we recommend using [Prettier](https://prettier.io/). Ideally, use a Prettier plugin for your favorite editor to format the code even more effectively and consistently, aligning with your code style guide.
