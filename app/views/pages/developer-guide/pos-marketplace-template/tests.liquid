---
converter: markdown
metadata:
  title: Tests
  description: This article describes how to use the End-To-End and Unit Tests included in the pOS Marketplace Template.    
---
This article describes how to use the End-To-End and unit tests included in the pOS Marketplace Template. 

{% include 'alert/note', content: 'Test-driven development is a best practice and a requirement if you are implementing a platformOS end client build. Besides leveraging the test scripts included in the template, you can learn more about testing in our [End-to-End Testing](/best-practices/end-to-end-testing/installing-testcafe) guides. ' %}

## E2E Tests

[Testcafe](https://devexpress.github.io/testcafe/) tests are located in the `test/` directory.


To run tests:

**1. Clean your Instance and seed test data:**

It might not be necessary in many cases but some tests require a clean slate and will fail if previous content exists. You might need to clean all the data from your Instance by using:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli data clean [YOUR_ENV_NAME]
</code></pre>

And after that seed the test data:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">pos-cli data import --path=./seed/data.zip --zip [YOUR_ENV_NAME]
</code></pre>

**2. Set the environment variable**

First, set the environment variable to point to your Instance.
	
On **unix-based** operating systems you can do this by prefixing all your commands with:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
MPKIT_URL=https://your-instance.example.com
</code></pre>

so your commands look like this:
	
<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
MPKIT_URL=https://your-instance.example.com testcafe "chromium" test/ --debug-on-fail
</code></pre>

On **Windows** you just set the variable once in PowerShell using:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
$env:MPKIT_URL="https://your-instance.example.com"
</code></pre>

**3. Run tests**

In headless mode, if you have Chromium installed:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
testcafe "chromium:headless" test/
</code></pre>

or just using Google Chrome:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
testcafe "chrome" test/
</code></pre>

**4. Debug**

To manually debug in case the test fails:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
testcafe "chromium" test/ --debug-on-fail
</code></pre>

To save screenshots of test fails:
<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
testcafe "chromium" test/ -s takeOnFails=true
</code></pre>


### E2E Test Report

To make a test report as page (with screenshots):
<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
MPKIT_URL=https://your-instance.example.com testcafe chrome:headless test/ report --reporter html:app/views/pages/_test_results/index.liquid -s path=test/screenshots/,takeOnFails=true
</code></pre>

Then open your browser and you can visit it at:
`https://your-instance.example.com/_test_results`


### Unit Tests

Put tests into `app/views/partials/test/commands`, files should end with `_test.liquid`.

To run all tests, deploy code on Instance and go to page:
`https://your-instance.example.com/tests/run`
    
To run one test go to page:
`https://your-instance.example.com/tests/run?name=commands/items/create/check_test`
    
Use assertion partials from `app/views/partials/test/assertions`.