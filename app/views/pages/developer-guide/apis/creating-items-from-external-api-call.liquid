---
converter: markdown
metadata:
  title: Creating Items from an External API Call
  description: This guide will help you create items from an external API call. The example shows the steps of creating a Model from existing data through an API call to our service.
---

This guide will help you create items from an external API call. The example shows the steps of creating a Model from existing data through an API call to our service.

## Requirements
This is an advanced tutorial. To follow it, you should be familiar with basic platformOS concepts, HTML, Liquid, APIs and Forms, and the topics in the Get Started section.

* [platformOS Workflow](/developer-guide/platformos-workflow/development-workflow)
* [Get Started](/get-started)
* [APIs and Forms](/developer-guide/forms/form-configurations)
* [Building a Contact Form with Models](/developer-guide/models/building-contact-form-with-model)

## Steps

Creating items from an external API call is a four-step process:

<div data-autosteps></div>

### Step 1: Prepare your endpoints' headers

Your endpoints will serve content as JSON. You need to create a Liquid file under `app/views/partials/shared/api/headers.liquid` to render the necessary headers:

```liquid
{% raw %}
{
  "Content-Type": "application/json"
}
{% endraw %}
```

### Step 2: Create your model's schema

You can define your data models under `app/model_schemas/`. In this example, you will store basic flower data so create `app/model_schemas/flower.yml`:

##### app/model_schemas/flower.yml

```yaml
name: flower
properties:
- name: name
  type: string
- name: creator_id
  type: integer
```

### Step 3: Create a REST endpoint to store a new flower

Create GraphQL mutations to store your data. Place these GraphQL files in the `app/graphql/` folder.

To add a new flower, create a new file `app/graphql/flowers/create_flower.graphql`:

##### app/graphql/flowers/create_flower.graphql

```graphql
mutation($name: String!, $creator_id: Int!) {
  flower: model_create(
    model: {
      model_schema_name: "flower"
      properties: [
        { name: "name", value: $name }
        { name: "creator_id", value_int: $creator_id }
      ]
    }
  ) {
    id
  }
}
```

The next step is to create a new page used as a REST endpoint for your web application. We recommend storing all endpoints used in the API inside the `app/views/pages/api` folder to ensure separation from other site sections.

Additionally, when planning to use different request methods for one URL like `POST /api/flowers`, `GET /api/flowers`, etc., we suggest naming the files after the request method related to the given endpoint. Place the endpoint responsible for adding new flowers in `app/views/pages/api/flowers/post.liquid`.

##### app/views/pages/api/flowers/post.liquid

```liquid
{% raw %}
---
slug: api/flowers
method: post
layout: ''
response_headers: >
  {% render 'shared/api/headers' %}
---

{% liquid
  graphql result = 'flowers/create_flower', name: context.params.name, creator_id: context.params.creator_id
  unless result.flower
    response_status 400
  endunless
%}

{{ result }}
{% endraw %}
```

You’ve defined the endpoint’s slug and method and removed the default layout. The previously created `headers.liquid` file is used to render the appropriate response header.

You’re calling the `flowers/create_flower` GraphQL mutation using the request parameters. All GraphQL results always return valid JSON. On error, the `result.flower` key will not be present, and you should add an appropriate error response status code. Finally, render the whole `result` object. It will contain either the new flower id or an error message when creating the flower has failed.


### Step 4: Generate API token

Log in to the Partner Portal, and click your user icon on the top right. Select `Your Profile`, click on `Tokens` and then on `Show/Hide` to show the **Access Key**.

### Step 5: Create curl command

Here is an example POST request you need to send. You need to set:

* the token in the header
* data payload in a JSON format

<pre class="command-line" data-output="2-50" data-user="user" data-host="host"><code class="language-bash">
curl --location --request POST 'https://example.platform-os.com/api/flowers' \
--header 'Authorization: Token token=[YOUR API TOKEN]' \
--header 'Content-Type: application/json' \
--data-raw '{"name":"Red flowers","creator_id":1}'
</code></pre>

