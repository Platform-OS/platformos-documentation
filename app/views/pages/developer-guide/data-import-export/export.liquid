---
converter: markdown
metadata:
  title: Data Export
  description: Detailed description of data export with examples.
---

You can **export data** using either the CLI or the raw export API. This can be useful when test data is needed for a service, e.g. in a staging environment.

## Data export with the CLI

platformOS CLI provides the `pos-cli data export` command. Options:

- --path (short: -p): A file path to a JSON file which will be created by the CLI and where the exported data is stored.
- --export-internal-ids: By default, export will use the autogenerated `external_id` for the `id` field. When this option is set, it will use the normal `id` from the object.

Under the hood, the CLI uses the export API that's described in the next section. However, using the CLI provides some major benefits:

- Leveraging the CLI's authentication mechanism (i.e. you don't need to manually send your authentication token)
- Writing downloaded data directly to the file system

Example:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli data export --path=data.json production
</code></pre>

## Data export with raw export API

Our CLI uses the HTTP API to schedule an export task. Once it is finished, you can download the data.

<pre class="command-line" data-output="2-6" data-user="user" data-host="host"><code class="language-bash">
curl -d @data.json \
  -H "Content-Type: application/json" \
  -H "Authorization: Token token=[YOUR API TOKEN]" \
  -X POST https://example.com/api/marketplace_builder/exports
</code></pre>

<pre class="command-line" data-output="2-6" data-user="user" data-host="host"><code class="language-bash">
curl -H "Content-Type: application/json" \
  -H "Authorization: Token token=[YOUR API TOKEN]" \
  https://example.com/api/marketplace_builder/exports/[export_id]
</code></pre>

{% include 'alert/note', content: 'You can find your API Token in [Partner Portal](https://partners.platformos.com/me) under "Access Key".' %}

## Data export with GraphQL

It is possible to export data with GraphQL queries.

```graphql
{
  users: people(per_page: 10000, user: { is_deleted: false }){
    total_entries
    results {
      id
      email
      first_name
      last_name
      middle_name
      created_at
      slug
      profiles {
        type_name: profile_type
        id
        ...Properties
      }
    }
  }
  models: customizations(per_page: 10000, is_deleted: false){
    total_entries
    results {
      type_name: name
      id
      customizable_id
      customizable_type
      user_id
      ...Properties
    }
  }
}

fragment Properties on ListingCustomAttributeInterface{
  properties
}
```
