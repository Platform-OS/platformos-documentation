---
metadata:
  title: What is platformOS?
  description: Learn what platformOS is- a fully managed, multi-tenant development platform with powerful abstraction layers like Liquid, GraphQL, and YAML, designed to build customizable, secure, and extensible SaaS applications
converter: markdown
---

<img loading="lazy" class="w-full" src="{{ 'images/get-started/what-is-pos/what-is-pos.png' | asset_url }}" alt="What is platformOS? diagram">

platformOS is a fully managed, multi-tenant-by-default development platform that gives teams full control over their data, schema, and application behavior, without needing to manage infrastructure themselves. This is all possible through a set of powerful **abstraction layers** using **Liquid**, **GraphQL**, and **YAML** configuration files. This abstraction layer simplifies development by providing access to a pre-configured infrastructure stack - to focus on building features, not managing servers.

<img loading="lazy" class="w-full" src="{{ 'images/get-started/what-is-pos/infrastructure.png' | asset_url }}" alt="platformOS infrastructure">

## Built for SaaS, Without the Typical Limitations

Originally built to support the creation of next-generation SaaS products, platformOS was designed to solve a key problem: **traditional SaaS lacks flexibility.** Most SaaS platforms offer extensive built-in functionality and a user interface for configuring application behavior, but users quickly hit limits when they need a missing feature or a custom integration. Instead of relying on workarounds or waiting for their feature requests to be prioritized, platformOS gives developers access to the source code in a secure, sandboxed, isolated runtime environment called an **[Instance](/get-started/installation-and-configuration/#create-an-instance)**. This allows developers to build on top of preconfigured functionality and, when needed, go beyond it by modifying the codebase.

## Best of Both Worlds

In short, customers of applications built on platformOS get the best of both worlds: they benefit from the immediate value of a working product and managed infrastructure of SaaS, the built-in DevOps automation, and a user interface to configure various aspects of the system. However, when they outgrow the built-in features or need to add custom behavior or integrations, platformOS gives them the ability to extend the application by modifying the source code directly. 

For example, platformOS powers a wide range of solutions - from **marketplaces** and **eCommerce solutions** to **community** **platforms**. For example, [Community Solution](https://www.platformos.com/community-solution) offers an affordable, advanced starting point that can scale in any direction.

Similarly, our multi-award winning Docs-as-Code approach to documentation, [DocsKit](https://docskit.platformos.com/), is available to use.

## Open-Source Modules and Resources

Building a complex application from scratch is a challenging task and a significant investment. That’s why we’ve created a set of **[open-sourced modules](https://documentation.platformos.com/developer-guide/integrations/integrations#modules)** that provide essential functionality - such as user authentication, RBAC authorization, OAuth integrations, 2FA, and payment processing - as well as general architectural patterns that help developers write maintainable code and implement unit tests.

We’ve also open-sourced repositories to make it easy to set up **CI/CD pipelines** via GitHub Actions. These pipelines can run E2E tests (for example, using Playwright), execute unit tests provided by the *pos-module-tests* module, and invoke the **[platformos-check](https://github.com/Platform-OS/platformos-check)** linter to catch syntax errors, dead code, undefined variables, and style guide violations - helping teams maintain code quality.

{% render 'alert/next', content: 'Your platformOS Toolkit?', url: '/get-started/your-pos-toolkit/' %}