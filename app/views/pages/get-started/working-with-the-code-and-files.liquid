---
metadata:
  title: Working with the code and files
  description: Follow these step-by-step tutorials to set up your development environment and deploy your first platformOS site.
converter: markdown
---

One of the core concepts of platformOS is that you never work offline. You edit the files on your system in your favourite code editor, but you are constantly connected to your instance so that platformOS engine can interpret and parse your codebase.

You write code locally, but it is executed remotely.


## Proper platformOS directory structure

In order for platformOS to understand and properly interpret your code, it needs to be organised in a specific way.

The simplest method for getting the proper folder structure is to use pos-cli’s init command.

Let’s start with creating an empty folder – named in this example platforms-hello – for your project and then navigating to it from the command line:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
cd x:\platformos-hello
</code></pre>

Now, to automatically create the proper directory structure inside that folder you just need to use:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli init
</code></pre>

The command should return a success message confirming that the directory structure was created.

This means that there are a bunch of new files and folders in your project’s root directory. We’ll get to what are they for in the next steps of this tutorial, or - if you want to jump in to the technical details - check out [platformOS Codebase](/developer-guide/platformos-workflow/codebase) section of this documentation.

What you need to know for now is that this command creates an example HTML page with a welcome message.


## Authenticate your environment

For pos-cli to know which instance is related to any particular codebase, we need to make a connection between those. Basically, we need to tell pos-cli that our code needs to be visible under some URL.

Your instance URL is available in the Partner Portal on the [Instances list](https://partners.platformos.com/instances).

To store your instance URL in the configuration you just need to run a pos-cli’s env add command with your personal data in the parameters:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli env add &lt;environment&gt; --email &lt;your email&gt; --url &lt;your instance url&gt;
</code></pre>

There is just a single decision here to be made. The `<environment>` parameter is a simple name you need to give your instance. Since you can connect multiple instances to a single codebase, it’s quite often a case where you want to have different environments for development and production.

Let’s assume the first created instance will be for development, thus we can name it `dev`. So, the example pos-cli command would look like this:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli env add dev --email myemail@example.com —-url https://my-instance.staging.oregon.platform-os.com
</code></pre>

After running this command, you’ll get asked for your Partner Portal password to authenticate. Providing the correct password will be confirmed by pos-cli:

```bash
Environment <your instance url> as <environment> has been added successfully.
```


## Upload your code to an instance

When we have an instance, and pos-cli is configured to connect with it, we would like to send our code to be available under the instance URL.

This process – called deployment – is a straight-forward operation and you just need to use the following command in the root of your project folder:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli deploy &lt;environment&gt;
</code></pre>

So, if we named the alias to our instance as <code>dev</code>, the command would look like:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli deploy dev
</code></pre>

The progress indicator is shown with the deployment status and once it finishes, a message is displayed:

```bash
Deploy succeeded after X seconds
```

After this you shall be able to enter the URL of your instance in the browser and it will be showing the example page that we’ve just deployed.


### Testing the deployment process

To test out the whole deployment process, let’s make some changes in the code.

If you’re following this guide, you should be able to find a file named index.html.liquid in your codebase. Open it up in your code editor of choice and change any line. For example let’s locate a line with the welcome message:

```html
Welcome to your Demo instance!
```

Try changing it into something more personal like:

```html
This is my first platfromOS instance!
```

Save the file and – as we learned – send the codebase to the instance by running the deploy command in the command line again:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli deploy dev
</code></pre>

After visiting your instance URL or refreshing previously opened page, you should see the new message there.

Ok, this works, but having to manually deploy each change would take far too much time. You wouldn’t want to enter any commands or wait so long for the pos-cli to send all of the files in your codebase each time you change a single line of your code. Because this is what the deploy command is doing – sending all the files in the codebase to the instance.


## Upload code changes automatically when you save the file

On a daily basis, you want the instance to immediately reflect the changes you made in the code with a minimum effort on your side.

This process we call **syncing** and it’s handled by a pos-cli command ran from the root project’s directory:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli sync &lt;environment&gt;
</code></pre>

When executing this command you will learn that it does not end by itself. This is a command that you want to run and leave opened while you make code changes.

What `pos-cli sync` is doing is basically observing your codebase, so when you save changes in a file – it automatically uploads it to your instance. Just the file that changed so it’s quick and efficient!


### Syncing in action

For our example we can try another change in the code, but before we’ll do it – let’s start the sync using the following command:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli sync dev
</code></pre>

A confirmation message saying that the synchronization has been started should appear, so we can find another place in the code to test how this works. Please find the `Hello world` title in `index.html.liquid` of the demo page and change it to something else, like `Hello beautiful world`.

After the change, just save the file.

In the command line you should see a confirmation message saying that the edited page was synced. Refreshing the page in the browser should confirm that everything worked and the new text content is in place.

Syncing handles not only code changes, but also all the other assets. Images, JavaScript files or even GraphQL queries – any change in your project directories will be automatically reflected on your instance.


## Basic overlook on the directory structure

The `pos-cli init` command will create all of the required folders used by platfromOS. The very basic directories you need to be aware of are those used to store files, web pages and handling data.

We have a whole separate article [describing each directory](/developer-guide/platformos-workflow/codebase) function in detail if you want to jump directly into the technical aspect. Those four mentioned below are enough to start though.

### Assets

Every **static**, publicly available, **asset** is stored in the app/assets folder. Images, JavaScript, fonts, CSS files or any downloadable documents should go here. We recommend a standarized set of subfolders for each type, so:

- app/assets/images for images
- app/assets/scripts for JavaScript files
- app/assets/styles for the page CSS
- app/assets/fonts for the font files

### Subpages

Every **subpage** that you want to create should be placed in app/views/pages. You can use pure HTML and extend it with Liquid.

### Data handling

The **schema** (the structure of your database written in YAML) has it’s place in `app/model_schemas`. We are going to walk through creating them in the next sections of this tutorial.

**GraphQL** queries are used to get the data from the database or save data in it. All of those queries have their place in `app/graphql`.


## Next chapter
[Build a ToDo List App](/get-started/todo-app/build-todo-list-app)
