---
converter: markdown
metadata:
  title: Deploying and Syncing Changes
  description: This guide will help you deploy and sync changes you make in your codebase to your Instance.
slug: get-started/deploying-syncing-changes
searchable: true
---

This guide will help you deploy and sync changes you make in your codebase to your Instance. To demonstrate the process, you'll make a small change on your home page, and deploy it to your Instance.

## Requirements

In order to deploy and sync changes to your Instance, you will need an Instance set up on the Partner Portal, and the pos-cli installed on your computer. You will also need to have the codebase for your Instance organized into the required directory structure.

* [Setting Up a Site on Our Platform](/get-started/setting-up-site)
* [Installing the pos-cli](/get-started/installing-pos-cli)
* [Creating the Codebase](/get-started/creating-codebase)

## Steps

Deploying and syncing changes is a three-step process:

<div data-autosteps></div>

### Step 1: Change something in your codebase

Locate the `home.html.liquid` file in your codebase (`app/views/pages/home.html.liquid`).

```liquid
{% raw %}
---
slug: /
layout_name: 1col
---
{%- assign name = 'Home' -%}
{%- content_for 'pagetitle' -%}{{ name }}{%- endcontent_for -%}
<h1>{{ name }}</h1>
{% endraw %}
```

Open it in a code editor of your choice, and add some text. Don't edit the lines between `---`:

```liquid
{% raw %}
---
slug: /
layout_name: 1col
---
{%- assign name = 'Home' -%}
{%- content_for 'pagetitle' -%}{{ name }}{%- endcontent_for -%}
<h1>{{ name }}</h1>
Hello, World!
{% endraw %}
```

Save your changes.

### Step 2: Authenticate environments

{% include 'alert/note', content: 'Make sure you remember your **Partner Portal** account email and password â€” you will need them to authenticate your environments.' %}

Now, you have to specify which Instance will be which environment. For example, you set up one Instance for staging, and another one for production. This information is stored in a config file.

Regardless of what your Instance is called, after you specify it as `staging`, you can refer to it as `staging` in all commands where applicable, and you won't have to use the Instance name or the URL of the Instance again.

To add your environment to the config file, run the `env add` command, and authenticate with your **Partner Portal** credentials.

{% include 'alert/note', content: 'Run all commands discussed in this tutorial in the project root directory, i.e. one level above the `app` directory.' %}

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli env add [environment] --email [your email] --url [your Instance URL]
</code></pre>

{% include 'alert/tip', content: 'You can copy this command pre-filled with your email and Instance URL from your Instance page on the Partner Portal.' %}

Example:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli env add staging --email myemail@example.com --url https://example.com
</code></pre>

A message _"Environment [your Instance URL] as staging has been added successfully."_ is displayed.

### Step 3: Deploy or sync changes

To be able to see your changes on your site, you have to deploy those changes to your Instance.

{% include 'alert/note', content: 'This step describes two different methods. If this is your first go, we recommend to follow the process described in the "Deploying" section.' %}

#### Deploying

To deploy all changes, run the `deploy` command:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli deploy [environment]
</code></pre>

Example:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli deploy staging
</code></pre>

A progress indicator shows that the deployment is in progress, and once it finishes, a _"Deploy succeeded after <time>"_ is displayed.

We recommend to first deploy to staging, test, and only then trigger a deployment to production. In practice, deploy creates a zip file that contains all your files, and sends it to the API. It is then processed in the background. We store each zip file, so that you can roll back in case something goes wrong.

{% include 'alert/note', content: 'Learn more about our recommendations for version control and deployment on platformOS in the <a href="/how-platformos-works/platformos-workflow/development-workflow">Development Workflow</a> topic.' %}

#### Syncing

To immediately push changes in your codebase to the environment, run the `sync` command:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli sync [environment]
</code></pre>

Example:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli sync staging
</code></pre>

Using the sync command feels like working on localhost. It is recommended to use sync only for staging environments, as pushing changes immediately to production can be dangerous. Please note, that unlike deploy, this command will not delete resources when you delete the file.

<br>
After you have deployed your Instance, refresh your site in your browser. The home page has changed to include the text you added.

## Next steps

Congratulations! You can deploy and sync your codebase to your Instance. Now, you can delve into learning more about development on platformOS.

* [Pages](/tutorials/pages/pages)
