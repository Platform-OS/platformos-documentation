---
metadata:
  title: Installation and configuration
  description: Follow these step-by-step tutorials to set up your development environment and deploy your first platformOS site.
converter: markdown
---


There are three key steps to start developing on platformOS: [signing up on Partner Portal](#sign-up-on-partner-portal), [creating an instance](#create-an-instance) and [installing the platformOS command line interface](#install-pos-cli).


## Sign up on Partner Portal

The [Partner Portal](https://partners.platform-os.com/) is an online interface, where you can create, manage and configure your sites.

To interact with platformOS you will need to have an account, so the very first thing you need to do is [registering on Partner Portal](https://partners.platformos.com/accounts/sign_up).

Make sure that you’ll verify your account by following the instructions you’ll find in the e-mail we send you after the registration.


## Create an instance

For our web app to work, we need to have a place where we will be running our code and storing files. On platformOS such place is called an _instance_.{% include 'alert/tip', content: 'Each separate site that you can create in the Partner Portal is called an **instance**.' %}

In order to create a new instance you need to be logged in the [Partner Portal](https://partners.platformos.com/) and in the left navigation you’ll find a [Create Instance](https://partners.platformos.com/instances/new) link.

The _Instance name_ can be any name of your choice. The only other option you’ll need to be concerned would be choosing the _Data Center_ and _Billing plan_. For the needs of this guide we can use the _Staging_ environment, which is a **completely free** environment designed exactly for testing and developement.

Choosing the _Staging_ data center and clicking on the _Staging Unbilled_ plan should be enough for you to create your first very own instance!

On the list of instances you may initially see your instance marked with _SCHEDULED_TO_ACTIVATE_ status. This proces usually takes only a couple of seconds, so no need to worry.

After a short while you should see the status changed to _Active_ when you refresh the page. This means that we can go to the instance URL visible in the list and actually check if it's working! This URL will be where we’ll see all the code changes so please note it’s importance.


## Install pos-cli

The platformOS command line interface – or `pos-cli` – is a tool that will allow you to interact with your instance.

The tool itself offers a variety of options, and we’ll explore it in future sections of this guide, or you can jump right in to [pos-cli documentation](/developer-guide/pos-cli/pos-cli).

**To install pos-cli** you’ll need a recent version of NPM (Node Package Manager) installed on your system. The NPM itself is distributed with Node.js, so we recommend you follow the [official guide for installing Node.js and NPM](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm). If you get lost there, it might be the easiest to use [node.js installer](https://nodejs.org/en/download/) that will look just like installing any other program on your system.

Once you have Node.js installed, start your command-line tool of choice and run the following:<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
npm install -g @platformos/pos-cli
</code></pre>

The `-g` attribute means we are installing the tool globally. That might require having a higher system permissions. On unix-based systems that means using sudo and on Windows it might require runing your command-line tool with the administrative rights (it should be available in the right-click context menu).

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
sudo npm install -g @platformos/pos-cli
</code></pre>

After installing pos-cli you should be able to test if everything ran successfully with the following command:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli -v
</code></pre>

If everything went smoothly you should be seeing the version number of pos-cli tool that you’ve just installed (for example: `4.7.1`).


{% render 'alert/next', content: 'Working with the code and files', url: '/get-started/working-with-the-code-and-files/' %}
