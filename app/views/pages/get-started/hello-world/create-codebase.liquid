---
converter: markdown
metadata:
  title: Create Your Codebase
  description: How to create your codebase and organize it into the directory structure platformOS uses.
---

{% include 'alert/tip', content: 'If you go through the Hello, World! onboarding steps when registering on the Partner Portal,  you can download the codebase of your demo Instance instead of creating it with the pos-cli init command.' %}

In order to correctly communicate with the platformOS engine and API, your codebase should be organized into a specific directory structure. You can create your codebase organized into the the required directory structure using the pos-cli's `init` command.

`pos-cli init` downloads the directory structure in a zip file, and extracts it into the current directory. This means the best way to start is to create a directory for all of your projects and a directory for your project inside of it.

Example directory structure before `pos-cli init`:

```shell
projects
└── hello-world
```

Change into the `hello-world` directory and run the `pos-cli init` command:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli init
</code></pre>

This command creates the required directories, configuration files, and some example files in the directory you specified.{%- capture content -%}Make sure you invoke this command where you have permissions to create a directory.
{%- endcapture -%}
{% include 'alert/important', content: content %}

If the directory is empty, the command shows a success message:

```shell
$ pos-cli init
[11:35:06] Directory structure successfully created.
```

If it is not empty (don't forget to think of hidden files), it will require your confirmation by adding the `--force` flag. Be aware that it will override your files if they conflict.

```shell
$ pos-cli init
[11:36:10] Cloning failed. Reason: destination directory is not empty, aborting. Use option force to override.
```

```shell
$ pos-cli init --force
[11:36:43] Directory structure successfully created.
```

Once you've installed the required directory structure, locate and explore it – this is how your codebase for your platformOS Instances should be organized.

Example directory structure after running `pos-cli init`:

```shell
.
├── LICENSE
├── app
│   ├── assets
│   │   ├── fonts
│   │   │   ├── Gotham-Bold.woff2
│   │   │   ├── Gotham-Book.woff2
│   │   │   ├── Gotham-Light.woff2
│   │   │   └── Gotham-Medium.woff2
│   │   ├── images
│   │   │   ├── logo-black.svg
│   │   │   ├── logo.svg
│   │   │   └── welcome.svg
│   │   ├── scripts
│   │   │   ├── app.js
│   │   │   ├── sw.js
│   │   │   └── vendor.js
│   │   └── styles
│   │       └── app.css
│   ├── authorization_policies
│   │   ├── example_policy.liquid
│   │   └── failing_policy.liquid
│   ├── forms
│   ├── graphql
│   │   └── example.graphql
│   ├── model_schemas
│   ├── api_calls
│   │   └── example.liquid
│   ├── emails
│   │   └── example.liquid
│   ├── smses
│   │       └── example.liquid
│   ├── translations
│   │   ├── en.yml
│   │   └── pl.yml
│   ├── user_profile_types
│   └── views
│       ├── layouts
│       │   ├── 1col.html.liquid
│       │   └── application.html.liquid
│       ├── pages
│       │   ├── admin.html.liquid
│       │   ├── index.html.liquid
│       │   └── unauthorized.html.liquid
│       └── partials
│           └── layout
│               ├── head.liquid
│               └── scripts.liquid
└── modules
    └── example
        ├── private
        │   ├── assets
        │   ├── authorization_policies
        │   ├── forms
        │   ├── graphql
        │   ├── model_schemas
        │   ├── api_calls
        │   ├── emails
        │   ├── smses
        │   ├── translations
        │   ├── user_profile_types
        │   └── views
        │       ├── layouts
        │       ├── pages
        │       └── partials
        └── public
            ├── assets
            ├── authorization_policies
            ├── forms
            ├── graphql
            ├── model_schemas
            ├── api_calls
            ├── emails
            ├── smses
            ├── translations
            ├── user_profile_types
            └── views
                ├── layouts
                ├── pages
                └── partials
```

To learn more about the required directories and files, visit [platformOS Codebase](/developer-guide/platformos-workflow/codebase).

## pos-cli wizard

{% include 'alert/tip', content: 'Use the pos-cli wizard to start from existing example code.' %}

pos-cli init’s wizard feature helps you download and install specific example code that the platformOS development team has provided.

Video tutorial:

{% include 'shared/video', id: 'WjZ79k6njTM' %}


Usage:

In your terminal, enter:

```shell
$ pos-cli init --wizard
```

This will give you a list of options to choose from:

* empty: Initialize the platformOS directory structure to start from scratch.
* Hello world: Initialize the directory structure and install the application code of the [Hello, World!](/get-started/hello-world/register-partner-portal) example.
* Todo app: Initialize the directory structure and install the application code of the [Building a ToDo List App](/get-started/todo-app/build-todo-list-app) example.
* Product Marketplace Template: Initialise the directory structure and install the [Product Marketplace Template](/get-started/marketplace-template/marketplace-template) solution.

Select the option you’d like to install and choose the branch you’d like to use from GitHub (the default is the master branch). The code is pulled to your local environment, and you can deploy it to your platformOS Instance.

<br/>
<br/>

<p class="text-right">
  <a href="/get-started/hello-world/change-homepage" class="font-semibold">Next step: Change Something on Your Homepage</a>
</p>
