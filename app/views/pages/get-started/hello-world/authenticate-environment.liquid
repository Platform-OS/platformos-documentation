---
converter: markdown
metadata:
  title: Authenticate Your Environment
  description: How to specify which Instance will be which environment.
slug: get-started/hello-world/authenticate-environment
searchable: true
---

{% include 'alert/note', content: 'Make sure you remember your **Partner Portal** account email and password â€” you will need them to authenticate your environments.' %}

Now, you have to specify which Instance will be which environment. For example, you set up one Instance for staging, and another one for production. This information is stored in a config file.

Regardless of what your Instance is called, after you specify it as `staging`, you can refer to it as `staging` in all commands where applicable, and you won't have to use the Instance name or the URL of the Instance again.

To add your environment to the config file, run the `env add` command, and authenticate with your **Partner Portal** credentials.

{% include 'alert/note', content: 'Run all commands discussed in this tutorial in the project root directory (one level above the `app` directory).' %}

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli env add [environment] --email [your email] --url [your Instance URL]
</code></pre>

{% include 'alert/tip', content: 'You can copy this command pre-filled with your email and Instance URL from your Instance page on the Partner Portal.' %}

Example:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli env add staging --email myemail@example.com --url https://example.com
</code></pre>

A message _"Environment [your Instance URL] as staging has been added successfully."_ is displayed.


</br>
</br>
<p align="right"><strong><a href="/get-started/hello-world/deploy-sync">Next step: Deploy or Sync</strong></p>

