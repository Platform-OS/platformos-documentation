---
metadata:
  title: Using the log Tag for Debugging
  description: Follow these step-by-step tutorials to build a Contact Us form on platformOS
converter: markdown
---

When building applications on platformOS, effective logging and error handling are important for quickly spotting and fixing issues. Being able to see what your application is doing and catching errors as they occur can save you both time and frustration.

{% include 'alert/tutorial', content: 'Before continuing with the Contact Us form, please read about [Error Handling and Troubleshooting](/get-started/error-handling) in the Getting Started section!' %}

In this part of the tutorial, we’ll dive into using the [log](/api-reference/liquid/platformos-tags#log) tag, a simple yet powerful tool for debugging your platformOS application. By adding logging to your workflow, you’ll get valuable insights into how your application is performing and be able to diagnose problems more easily.

Here’s how to implement logging in your `app/lib/commands/contacts/create.liquid` file:

#### app/lib/commands/contacts/create.liquid

{% raw %}
```liquid
{% function contact = 'commands/contacts/create/build', object: object %}
{% log contact, type: 'result of invoking build' %}

{% return contact %}
```
{% endraw %}

**Explanation:**

| Variable | Description                                                                                  |
|----------|----------------------------------------------------------------------------------------------|
| `contact` | This is the variable containing the processed object. It includes the `email` and `body` parameters, with `email` being downcased. |
| `type: 'result of invoking build'` | This provides a label for the log entry, making it easier to identify in the logs. |

## Accessing logs

To view your logs, you need to use the pos-cli GUI.

To start the GUI, in your command line, run:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli gui serve --sync staging
</code></pre>

{% include 'alert/note', content: 'Replace `staging` with the environment name you want to develop on. To list all available environments use `pos-cli env list`. Refer to the [platformOS documentation](/developer-guide/pos-cli/manage-database-using-pos-cli-gui.liquid#starting-the-gui) for detailed instructions on starting the GUI.' %}

After starting the GUI, you will see output similar to:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
  [07:23:19] Connected to https://contactus.staging.oregon.platform-os.com/
  [07:23:19] Admin: http://localhost:3333
  [07:23:19] ---
  [07:23:19] GraphiQL IDE: http://localhost:3333/gui/graphql
  [07:23:19] Liquid evaluator: http://localhost:3333/gui/liquid
  [07:23:19] Instance Logs: http://localhost:3333/logs
  [07:23:20] [Sync] Synchronizing changes to: https://contactus.staging.oregon.platform-os.com/
  </code></pre>

Open your browser and go to [http://localhost:3333/logs](http://localhost:3333/logs) to view the logs:

{% # TODO: check size %}
<img loading="lazy" class="w-full" src="{{ 'images/get-started/contact-us-tutorial/localhost_logs.png' | asset_url }}" alt="Viewing logs in the local server">

Alternatively, you can use the CLI to render the logs by running the following command:

<pre class="command-line" data-user="user" data-host="host"><code class="language-bash">
pos-cli logs staging
</code></pre>

{% # TODO: check size %}
<img loading="lazy" class="w-full" src="{{ 'images/get-started/contact-us-tutorial/logs_cli.png' | asset_url }}" alt="CLI command to view logs">

## Example of introducing a syntax error

Using the `log` tag effectively helps in diagnosing problems and ensuring your application runs smoothly.
If you encounter a syntax error, such as an unnecessary comma, you can debug it by viewing the logs.
For testing purposes, let's add an extra comma after `"body"` in the `app/lib/commands/contacts/create/build.liquid` file:

#### app/lib/commands/contacts/create/build.liquid

{% raw %}
```liquid
{% parse_json contact %}
  {
    "email": {{ object.email | downcase | json }},
    "body": {{ object.body | json }},
  }
{% endparse_json %}

{% liquid
  return contact
%}
```
{% endraw %}

Now, with this unnecessary comma added, submit the form with test data.

When you introduce an error like this and then access the logs at http://localhost:3333/logs, you will see a Liquid error indicating the issue. This helps you identify and correct syntax errors.

{% # TODO: check size %}
<img loading="lazy" class="w-full" src="{{ 'images/get-started/contact-us-tutorial/log_liquid_error.png' | asset_url }}" alt="Liquid error log example">

Now, remove the extra comma and continue our task.

#### app/lib/commands/contacts/create/build.liquid

{% raw %}
```liquid
{% parse_json contact %}
  {
    "email": {{ object.email | downcase | json }},
    "body": {{ object.body | json }}
  }
{% endparse_json %}

{% liquid
  return contact
%}
```
{% endraw %}

## Display Data

Now, if you fill in the form and there are no errors in the logs, you can see that nothing is rendered. This is expected as we haven't instructed the system to display anything yet.

{% # TODO: check size %}
<img loading="lazy" class="w-full" src="{{ 'images/get-started/contact-us-tutorial/fill_form_no_render.gif' | asset_url }}" alt="Filling the form without any render">

In platformOS, you can display data using double curly brackets `{% raw %}{{ }}{% endraw %}` for output, or dedicated tags like `{% raw %}{% print %}{% endraw %}` and `{% raw %}{% echo %}{% endraw %}`.
  
- **Double Curly Brackets `{% raw %}{{ }}{% endraw %}`**: Used for rendering variables directly in your templates.
- **`{% print %}`**: Outputs content to the template and is often used for debugging. Read our documentation about [print](https://documentation.platformos.com/api-reference/liquid/platformos-tags#print).
- **`{% echo %}`**: Similar to `print`, but with subtle differences in context handling. Read our documentation about [echo](https://documentation.platformos.com/api-reference/liquid/theme#echo).

{% render 'alert/next', content: 'Using the Check Command', url: '/get-started/contact-us-tutorial/using-the-check-command' %}